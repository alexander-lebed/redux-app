{"/home/alebed/STUFF/workspace/redux-app/src/app.js":{"size":775,"mtime":1502354928995,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/app.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport Navigation from './components/NavigationBar';\nimport TodoList from './components/Todo/TodoList';\nimport WeatherList from './components/Weather/WeatherList';\n\nconst Content = () => (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={TodoList} />\n            <Route exact path=\"/todo\" component={TodoList} />\n            <Route path=\"/weather\" component={WeatherList} />\n        </Switch>\n    </Router>\n);\n\nrender(\n    <Provider store={store}>\n        <div>\n            <Navigation />\n            <Content />\n        </div>\n    </Provider>,\n    document.getElementById('app')\n);\n"}},"/home/alebed/STUFF/workspace/redux-app/src/components/NavigationBar.js":{"size":513,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/components/NavigationBar.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\nimport React from 'react';\nimport Navbar from 'react-bootstrap/lib/Navbar';\nimport Nav from 'react-bootstrap/lib/Nav';\nimport NavItem from 'react-bootstrap/lib/NavItem';\n\nconst Navigation = () => (\n    <Navbar>\n        <Navbar.Header>\n            <Navbar.Brand>\n                <a href=\"/\">Home</a>\n            </Navbar.Brand>\n        </Navbar.Header>\n        <Nav>\n            <NavItem eventKey={1} href=\"/todo\">Todo</NavItem>\n            <NavItem eventKey={2} href=\"/weather\">Weather</NavItem>\n        </Nav>\n    </Navbar>\n);\n\nexport default Navigation;\n"}},"/home/alebed/STUFF/workspace/redux-app/src/components/Todo/Todo.js":{"size":2646,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/components/Todo/Todo.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\nimport React from 'react';\nimport { Map } from 'immutable';\nimport Modal from 'react-bootstrap/lib/Modal';\nimport ButtonToolbar from 'react-bootstrap/lib/ButtonToolbar';\nimport Button from 'react-bootstrap/lib/Button';\nimport Glyphicon from 'react-bootstrap/lib/Glyphicon';\n\n\ntype Props = {\n    todo: Map<string, any>,\n    onEdit: (id: string, text: string) => void,\n    onDelete: (id: string) => void\n}\n\ntype State = {\n    todoToEdit: Map<string, any> | null\n}\n\nexport default class Todo extends React.Component<void, Props, State> {\n    state: State;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            todoToEdit: null\n        };\n    }\n\n    editTodo(todo: Map<string, any>) {\n        this.props.onEdit(todo.get('id'), todo.get('text'));\n        this.setState({ todoToEdit: null });\n    }\n\n    render() {\n        const { todo, onDelete } = this.props;\n        const { todoToEdit } = this.state;\n\n        const stateSetter = obj => this.setState(obj);\n\n        let editModal;\n        if (todoToEdit) {\n            editModal = (\n                <Modal show onHide={() => stateSetter({ todoToEdit: null })}>\n                    <Modal.Header>\n                        <Modal.Title>Edit todo</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <input\n                            type=\"text\"\n                            className='todo__entry'\n                            value={todoToEdit.get('text')}\n                            onChange={e => stateSetter({ todoToEdit: todoToEdit.set('text', e.target.value) })}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            id='confirm-btn'\n                            className='pull-right'\n                            disabled={false}\n                            onClick={() => this.editTodo(todoToEdit)}\n                        >\n                            EDIT\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            );\n        } else {\n            editModal = null;\n        }\n\n        return (\n            <div>\n                {todo.get('isDone') ?\n                    <strike>{todo.get('text')}</strike> :\n                    <span>{todo.get('text')}</span>\n                }\n                <ButtonToolbar className=\"pull-right\" style={{ marginTop: 3 }}>\n                    <Glyphicon\n                        id=\"edit-todo\"\n                        glyph=\"pencil\"\n                        style={{ marginRight: 15, color: 'grey' }}\n                        onClick={() => stateSetter({ todoToEdit: todo })}\n                    />\n                    <Glyphicon\n                        id=\"remove-todo\"\n                        glyph=\"remove\"\n                        style={{ color: 'grey' }}\n                        onClick={onDelete}\n                    />\n                </ButtonToolbar>\n                {editModal && editModal}\n            </div>\n        );\n    }\n}\n"}},"/home/alebed/STUFF/workspace/redux-app/src/components/Weather/Location.js":{"size":971,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/components/Weather/Location.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\nimport React from 'react';\nimport { Map } from 'immutable';\nimport Col from 'react-bootstrap/lib/Col';\nimport Row from 'react-bootstrap/lib/Row';\nimport Glyphicon from 'react-bootstrap/lib/Glyphicon';\n\n\ntype Props = {\n    location: Map<string, any>,\n    onDelete: (id: string) => void\n}\n\nconst Location = (props: Props) => {\n    const { location, onDelete } = props;\n    let temperature = '';\n    if (location.get('temp')) {\n        const degreesInCelsius = Math.round((location.get('temp') - 32) / 1.8);\n        temperature = `${degreesInCelsius} Â°C`;\n    } else {\n        temperature = 'not available';\n    }\n    return (\n        <Row>\n            <Col xs={6}>{location.get('city')}</Col>\n            <Col xs={3}>{temperature}</Col>\n            <Col xs={3}>\n                <Glyphicon\n                    glyph=\"remove\"\n                    className=\"pull-right\"\n                    style={{ marginRight: 10 }}\n                    title=\"Remove Location\"\n                    onClick={onDelete}\n                />\n            </Col>\n        </Row>\n    );\n};\n\nexport default Location;\n"}},"/home/alebed/STUFF/workspace/redux-app/src/helpers/id-generator.js":{"size":114,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/helpers/id-generator.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"/home/alebed/STUFF/workspace/redux-app/src/redux/actions/todo-actions.js":{"size":594,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/redux/actions/todo-actions.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\nimport { Map } from 'immutable';\nimport type { Action } from '../types';\nimport uid from '../../helpers/id-generator';\n\n\nexport const addTodo = (text: string): Action => ({\n    type: 'ADD_TODO',\n    payload: Map({\n        id: uid(),\n        isDone: false,\n        isDeleted: false,\n        text\n    })\n});\n\nexport const updateTodo = (id: string, text: string) => ({\n    type: 'UPDATE_TODO',\n    payload: { id, text }\n});\n\nexport const toggleTodo = (id: string): Action => ({\n    type: 'TOGGLE_TODO',\n    payload: id\n});\n\nexport const removeTodo = (id: string): Action => ({\n    type: 'REMOVE_TODO',\n    payload: id\n});\n"}},"/home/alebed/STUFF/workspace/redux-app/src/redux/actions/weather-actions.js":{"size":375,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/redux/actions/weather-actions.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\nimport type { Action, State } from '../types';\n\n\nexport const addLocation = (id: string): Action => ({\n    type: 'ADD_LOCATION',\n    payload: id\n});\n\nexport const updateLocations = (locations: State): Action => ({\n    type: 'UPDATE_LOCATIONS',\n    payload: locations\n});\n\nexport const removeLocation = (id: string): Action => ({\n    type: 'REMOVE_LOCATION',\n    payload: id\n});\n"}},"/home/alebed/STUFF/workspace/redux-app/src/redux/reducers/todo-reducer.js":{"size":2106,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/redux/reducers/todo-reducer.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\nimport { List, Map } from 'immutable';\nimport type { Action, State } from '../types';\nimport uid from '../../helpers/id-generator';\n\n\nconst initTodos = List([\n    Map({ id: uid(), isDone: true, text: 'use Redux', isDeleted: false }),\n    Map({ id: uid(), isDone: true, text: 'use ImmutableJS', isDeleted: false }),\n    Map({ id: uid(), isDone: true, text: 'rebuild on code changes', isDeleted: false }),\n    Map({ id: uid(), isDone: true, text: 'use react-bootstrap', isDeleted: false }),\n    Map({ id: uid(), isDone: true, text: 'push to Github', isDeleted: false }),\n    Map({ id: uid(), isDone: true, text: 'add Router', isDeleted: false }),\n    Map({ id: uid(), isDone: true, text: 'type checking with Flow', isDeleted: false }),\n    Map({ id: uid(), isDone: true, text: 'bindActionCreators (Redux)', isDeleted: false }),\n    Map({ id: uid(), isDone: false, text: 'fix bug with state on tab change', isDeleted: false }),\n    Map({ id: uid(), isDone: true, text: 'test with Jest', isDeleted: false }),\n    Map({ id: uid(), isDone: false, text: 'linting with ESLint', isDeleted: false }),\n    Map({ id: uid(), isDone: false, text: 'log in page', isDeleted: false }),\n    Map({ id: uid(), isDone: false, text: 'use cookies or localStorage', isDeleted: false })\n]);\n\n\nconst reducer = (state: State = initTodos, action: Action): State => {\n    const findIndexById = (id: string) => state.findIndex(t => t.get('id') === id);\n    switch (action.type) {\n    case 'ADD_TODO':\n        return state.set(state.size, action.payload);\n    case 'UPDATE_TODO': {\n        const index = findIndexById(action.payload.id);\n        return index !== -1 ? state.update(index, t => t.set('text', action.payload.text)) : state;\n    }\n    case 'TOGGLE_TODO': {\n        const index = findIndexById(action.payload);\n        return index !== -1 ? state.update(index, t => t.update('isDone', isDone => !isDone)) : state;\n    }\n    case 'REMOVE_TODO': {\n        const index = findIndexById(action.payload);\n        return index !== -1 ? state.update(index, t => t.set('isDeleted', true)) : state;\n    }\n    default:\n        return state;\n    }\n};\n\nexport default reducer;\n"}},"/home/alebed/STUFF/workspace/redux-app/src/redux/reducers/weather-reducer.js":{"size":1276,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/redux/reducers/weather-reducer.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"// @flow\nimport { List, Map } from 'immutable';\nimport type { Action, State } from '../types';\nimport uid from '../../helpers/id-generator';\n\n\nconst initLocations = List([\n    Map({ id: uid(), city: 'Odessa', country: 'Ukraine', temp: 0, isDeleted: false }),\n    Map({ id: uid(), city: 'New York', country: 'United States', temp: 0, isDeleted: false }),\n    Map({ id: uid(), city: 'Valencia', country: 'Spain', temp: 0, isDeleted: true }),\n    Map({ id: uid(), city: 'London', country: 'Great Britain', temp: 0, isDeleted: true }),\n    Map({ id: uid(), city: 'San Francisco', country: 'United States', temp: 0, isDeleted: true })\n]);\n\nconst reducer = (state: State = initLocations, action: Action): State => {\n    const findIndexById = id => state.findIndex(t => t.get('id') === id);\n    switch (action.type) {\n    case 'ADD_LOCATION': {\n        const index = findIndexById(action.payload);\n        return index !== -1 ? state.update(index, t => t.set('isDeleted', false)) : state;\n    }\n    case 'UPDATE_LOCATIONS': {\n        return action.payload;\n    }\n    case 'REMOVE_LOCATION': {\n        const index = findIndexById(action.payload);\n        return index !== -1 ? state.update(index, t => t.set('isDeleted', true)) : state;\n    }\n    default:\n        return state;\n    }\n};\n\nexport default reducer;\n"}},"/home/alebed/STUFF/workspace/redux-app/src/redux/store.js":{"size":278,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/redux/store.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"/home/alebed/STUFF/workspace/redux-app/src/redux/types.js":{"size":194,"mtime":1502354928999,"hashOfConfig":"1he2rbh","results":{"filePath":"/home/alebed/STUFF/workspace/redux-app/src/redux/types.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}}}