{"version":3,"sources":["webpack:///./src/components/common/ConfirmationModal.js","webpack:///./src/components/Messages/ConversationPreview.js","webpack:///./src/components/Messages/Conversations.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_redux__WEBPACK_IMPORTED_MODULE_1__","react_bootstrap_Modal__WEBPACK_IMPORTED_MODULE_2__","react_bootstrap_Modal__WEBPACK_IMPORTED_MODULE_2___default","react_bootstrap_Button__WEBPACK_IMPORTED_MODULE_3__","react_bootstrap_Button__WEBPACK_IMPORTED_MODULE_3___default","props","translation","useSelector","state","a","createElement","show","onHide","onCancel","Header","Title","title","Body","body","Footer","variant","size","onClick","onConfirm","YES","CANCEL","ConversationPreview","_this$props","this","conversation","userId","users","history","showPictureModal","showDeleteConfirmation","messages","filter","e","deleted","unreadMessages","m","read","lastMessage","messageTextClass","goToConversation","query_string__WEBPACK_IMPORTED_MODULE_8___default","stringify","convId","_id","react__WEBPACK_IMPORTED_MODULE_6___default","key","className","react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_9___default","noGutters","react_bootstrap_Col__WEBPACK_IMPORTED_MODULE_10___default","xs","sm","SenderInfo","style","paddingRight","username","paddingLeft","concat","text","react_bootstrap_Badge__WEBPACK_IMPORTED_MODULE_12___default","marginRight","length","timestampToHumanDate","timestamp","DELETE","event","React","PureComponent","Object","react_redux__WEBPACK_IMPORTED_MODULE_7__","user","_this$props2","userIds","map","u","senders","pictureUrl","lastSender","Fragment","react_bootstrap_Image__WEBPACK_IMPORTED_MODULE_11___default","roundedCircle","src","some","online","_constants__WEBPACK_IMPORTED_MODULE_13__","color","sender","MAIN_COLOR","reduce","prev","curr","Conversations","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","call","_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4___default","value","setState","filteredConversations","conversations","result","conv","matchedUsers","join","toLowerCase","convMessagesStr","push","url","clickedPicture","deleteConversationId","deleteConversation","hideDeleteConfirmation","getConversationsByUser","_this2","isConversationsLoaded","content","react__WEBPACK_IMPORTED_MODULE_7___default","react_bootstrap_Jumbotron__WEBPACK_IMPORTED_MODULE_15___default","react_bootstrap_Table__WEBPACK_IMPORTED_MODULE_16___default","hover","_ConversationPreview__WEBPACK_IMPORTED_MODULE_21__","paddingTop","_common_Spinner__WEBPACK_IMPORTED_MODULE_22__","react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_9___default","fluid","react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_10___default","react_bootstrap_Col__WEBPACK_IMPORTED_MODULE_11___default","md","span","offset","lg","react_bootstrap_InputGroup__WEBPACK_IMPORTED_MODULE_12___default","Prepend","react_bootstrap_Form__WEBPACK_IMPORTED_MODULE_13___default","Control","placeholder","SEARCH_IN_CONVERSATIONS","aria-label","aria-describedby","onChange","onSearch","react_bootstrap_Button__WEBPACK_IMPORTED_MODULE_17___default","createConversation","NEW_CONVERSATION","react_bootstrap_Modal__WEBPACK_IMPORTED_MODULE_14___default","hidePictureModal","textAlign","react_bootstrap_Image__WEBPACK_IMPORTED_MODULE_18___default","_common_ConfirmationModal__WEBPACK_IMPORTED_MODULE_20__","DELETE_CONFIRMATION","react_redux__WEBPACK_IMPORTED_MODULE_8__","_redux_reducers_conversations__WEBPACK_IMPORTED_MODULE_19__"],"mappings":"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","file":"25.chunk.1.0.0.js","sourcesContent":["// @flow\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button';\r\nimport type { Node } from 'react';\r\nimport type { Translation } from '../../types';\r\n\r\ntype Props = {\r\n    title: Node | string,\r\n    body: Node | string,\r\n    onConfirm: Function,\r\n    onCancel: Function,\r\n}\r\n\r\nconst ConfirmationModal = (props: Props) => {\r\n    const translation: Translation = useSelector(state => state.translation);\r\n    return (\r\n        <Modal show onHide={props.onCancel}>\r\n            <Modal.Header >\r\n                <Modal.Title>\r\n                    {props.title}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {props.body}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button\r\n                    variant='success'\r\n                    size='sm'\r\n                    onClick={props.onConfirm}\r\n                >\r\n                    {translation.COMMON.YES}\r\n                </Button>\r\n                <Button\r\n                    variant='outline-dark'\r\n                    size='sm'\r\n                    onClick={props.onCancel}\r\n                >\r\n                    {translation.COMMON.CANCEL}\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","// @flow\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport queryString from 'query-string';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport { MAIN_COLOR, ONLINE_STYLE } from '../../constants';\r\nimport { timestampToHumanDate } from '../../utils';\r\nimport type { User, Conversation as ConversationType, Translation } from '../../types';\r\n\r\ntype Props = {\r\n    userId: string,\r\n    conversation: ConversationType,\r\n    history: Object,\r\n    showPictureModal: Function,\r\n    showDeleteConfirmation: Function,\r\n    // redux props\r\n    users: Array<User>,\r\n    translation: Translation,\r\n}\r\n\r\nclass ConversationPreview extends React.PureComponent<Props, void> {\r\n    static displayName = 'ConversationPreview';\r\n    render() {\r\n        const {conversation, userId, users, translation, history, showPictureModal, showDeleteConfirmation} = this.props;\r\n        const messages = conversation.messages.filter(e => !e.deleted);\r\n        const unreadMessages = messages.filter(m => !m.read && m.from._id !== userId);\r\n        const lastMessage = messages.length > 0 ? messages[messages.length - 1] : null;\r\n        const messageTextClass = lastMessage && !lastMessage.read ? 'unread-message' : '';\r\n        const goToConversation = () => {\r\n            history.push(`/conversation?${queryString.stringify({convId: conversation._id})}`);\r\n        };\r\n        return (\r\n            <tr key={conversation._id} className={unreadMessages.length > 0 ? 'new-messages-bg' : ''}>\r\n                <td className='conversation-td'>\r\n                    <Row noGutters>\r\n                        <Col xs={7} sm={10}>\r\n                            <SenderInfo\r\n                                history={history}\r\n                                convId={conversation._id}\r\n                                userId={userId}\r\n                                conversation={conversation}\r\n                                showPictureModal={showPictureModal}\r\n                                users={users}\r\n                            />\r\n                            {/* Last message details (desktop only) */}\r\n                            {lastMessage &&\r\n                                <Row className='message-preview d-none d-sm-flex' onClick={goToConversation}>\r\n                                    <Col xs={4} sm={2} className='user-from-text' style={{paddingRight: 0}}>\r\n                                        {lastMessage.from.username}:\r\n                                    </Col>\r\n                                    <Col xs={8} sm={8} style={{paddingLeft: 10}}>\r\n                                        <div className={`conversation-text ${messageTextClass}`}>\r\n                                            {lastMessage.text}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            }\r\n                        </Col>\r\n                        {/* Message time and delete btn */}\r\n                        <Col xs={5} sm={2} className='conversation-actions' onClick={goToConversation}>\r\n                            {unreadMessages.length > 0 &&\r\n                            <Badge  variant='success' style={{marginRight: 15}}>\r\n                                {unreadMessages.length}\r\n                            </Badge>\r\n                            }\r\n                            {timestampToHumanDate(conversation.timestamp, false, translation)}\r\n                            <i\r\n                                className='far fa-trash-alt'\r\n                                title={translation.CONVERSATIONS.DELETE}\r\n                                style={{paddingLeft: 10}}\r\n                                onClick={(event) => showDeleteConfirmation(event, conversation._id)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    {/* Last message details (mobile only) */}\r\n                    {lastMessage &&\r\n                    <Row className='message-preview d-flex d-sm-none' onClick={goToConversation}>\r\n                        <Col xs={4} sm={2} className='user-from-text'>\r\n                            {lastMessage.from.username}:\r\n                        </Col>\r\n                        <Col xs={8} sm={8} style={{paddingLeft: 10}}>\r\n                            <div className={`conversation-text ${messageTextClass}`}>\r\n                                {lastMessage.text}\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    }\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        user: state.authentication.user,\r\n        users: state.users.users,\r\n        translation: state.translation\r\n    }),\r\n    {  }\r\n)(ConversationPreview);\r\n\r\ntype SenderInfoProps = {\r\n    history: Object,\r\n    convId: String,\r\n    userId: string,\r\n    conversation: ConversationType,\r\n    showPictureModal: Function,\r\n    // redux props\r\n    users: Array<User>\r\n}\r\nclass SenderInfo extends React.PureComponent<SenderInfoProps, void> {\r\n    static displayName = 'SenderInfo';\r\n    render() {\r\n        const {history, convId, conversation, userId, users, showPictureModal} = this.props;\r\n        const userIds =  conversation.users.map(u => u._id);\r\n        let senders: Array<User> = users.filter(u => userIds.includes(u._id));\r\n        if (senders.length > 1) {\r\n            senders = senders.filter(u => u._id !== userId); // exclude recipient\r\n        }\r\n        const lastSender = senders[0];\r\n        let pictureUrl;\r\n        if (senders.length === 1) {\r\n            pictureUrl = lastSender.pictureUrl ? lastSender.pictureUrl : '/images/default-profile.jpg';\r\n        } else {\r\n            pictureUrl = '/images/conversation-group.jpg';\r\n        }\r\n        const goToConversation = () => {\r\n            history.push(`/conversation?${queryString.stringify({convId})}`);\r\n        };\r\n        return (\r\n            <>\r\n                <div className='profile-picture-wrapper'>\r\n                    {senders.length === 1 ?\r\n                        <Image\r\n                            roundedCircle\r\n                            style={lastSender.online ? ONLINE_STYLE : {}}\r\n                            className='profile-picture'\r\n                            src={pictureUrl}\r\n                            onClick={() => showPictureModal(pictureUrl)}\r\n                        />\r\n                        :\r\n                        <Image\r\n                            roundedCircle\r\n                            style={senders.some(e => e.online) ? ONLINE_STYLE : {}}\r\n                            className='profile-picture'\r\n                            src={pictureUrl}\r\n                            onClick={() => showPictureModal(pictureUrl)}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div style={{color: '#343a40'}} onClick={goToConversation}>\r\n                    {senders.length === 1 ?\r\n                        <strong>\r\n                            {lastSender.username}\r\n                        </strong>\r\n                        :\r\n                        <div className='cut-senders-text'>\r\n                            {senders.map(sender => (\r\n                                <strong key={sender._id} style={sender.online ? {color: MAIN_COLOR} : {}}>\r\n                                    {sender.username}\r\n                                </strong>\r\n                            )).reduce((prev, curr) => [prev, ', ', curr])}\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","// @flow\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { getConversationsByUser, deleteConversation } from '../../redux/reducers/conversations';\r\nimport ConfirmationModal from '../common/ConfirmationModal';\r\nimport ConversationPreview from './ConversationPreview';\r\nimport Spinner from '../common/Spinner';\r\nimport type { User, Conversation as ConversationType, Translation } from '../../types';\r\n\r\ntype Props = {\r\n    history: Object,\r\n    // redux props\r\n    user: User,\r\n    conversations: Array<ConversationType>,\r\n    isConversationsLoaded: boolean,\r\n    translation: Translation,\r\n    getConversationsByUser: Function,\r\n    deleteConversation: Function\r\n}\r\n\r\ntype State = {\r\n    conversations: Array<ConversationType>,\r\n    filteredConversations: Array<ConversationType>,\r\n    clickedPicture: string,\r\n    deleteConversationId: string\r\n}\r\n\r\nclass Conversations extends React.PureComponent<Props, State> {\r\n    state: State;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            conversations: [],\r\n            filteredConversations: [],\r\n            clickedPicture: '',\r\n            deleteConversationId: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getConversationsByUser(this.props.user._id);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.conversations !== state.conversations) {\r\n            return {\r\n                conversations: props.conversations,\r\n                filteredConversations: props.conversations\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onSearch = (value) => {\r\n        if (value === '') {\r\n            this.setState({\r\n                filteredConversations: this.props.conversations // back to original list\r\n            });\r\n        } else {\r\n            const result = this.props.conversations.filter(conv => {\r\n                const matchedUsers = conv.users.filter(u => u.username.toLowerCase().indexOf(value.toLowerCase()) !== -1);\r\n                if (matchedUsers.length > 0) {\r\n                    return true;\r\n                }\r\n                const convMessagesStr = `${conv.messages.map(e => e.text).join(' ')}`.toLowerCase();\r\n                return convMessagesStr.indexOf(value.toLowerCase()) !== -1;\r\n            });\r\n            this.setState({\r\n                filteredConversations: result\r\n            });\r\n        }\r\n    };\r\n\r\n    createConversation = () => this.props.history.push('/create-conversation');\r\n\r\n    showPictureModal = (url: string) => this.setState({clickedPicture: url});\r\n\r\n    hidePictureModal = () =>  this.setState({clickedPicture: ''});\r\n\r\n    showDeleteConfirmation = (event, convId: string) => {\r\n        event.stopPropagation();\r\n        this.setState({\r\n            deleteConversationId: convId\r\n        })\r\n    };\r\n\r\n    hideDeleteConfirmation = () => this.setState({deleteConversationId: ''});\r\n\r\n    deleteConversation = () => {\r\n        this.props.deleteConversation(this.state.deleteConversationId);\r\n        this.hideDeleteConfirmation();\r\n    };\r\n\r\n    render() {\r\n        const {user, isConversationsLoaded, translation, history} = this.props;\r\n        const conversations = this.state.filteredConversations;\r\n\r\n        let content = [];\r\n        if (!isConversationsLoaded) {\r\n            content = (\r\n                <div style={{paddingTop: '50vh'}}>\r\n                    <Spinner />\r\n                </div>\r\n            )\r\n        } else if (conversations.length === 0) {\r\n            content = (\r\n                <Jumbotron className='text-center'>\r\n                    <p>{translation.CONVERSATIONS.NO_CONVERSATIONS}</p>\r\n                </Jumbotron>\r\n            )\r\n        } else {\r\n            content = ( // delete on hover: <Table hover className='fa-hover'>\r\n                <Table hover>\r\n                    <tbody>\r\n                        {conversations.map(conversation => (\r\n                            <ConversationPreview\r\n                                key={conversation._id}\r\n                                userId={user._id}\r\n                                conversation={conversation}\r\n                                history={history}\r\n                                showPictureModal={this.showPictureModal}\r\n                                showDeleteConfirmation={this.showDeleteConfirmation}\r\n                            />\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )\r\n        }\r\n        return (\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col md={{span: 10, offset: 1}} lg={{span: 8, offset: 2}}>\r\n                        <div className='header'>\r\n                            <div style={{color: 'grey'}}>\r\n                                <InputGroup size='sm' className='search-container'>\r\n                                    <InputGroup.Prepend>\r\n                                        <i className='fas fa-search' />\r\n                                    </InputGroup.Prepend>\r\n                                    <Form.Control\r\n                                        placeholder={translation.CONVERSATIONS.SEARCH_IN_CONVERSATIONS}\r\n                                        aria-label='Search conversations'\r\n                                        aria-describedby='search'\r\n                                        className='search-input'\r\n                                        onChange={e => this.onSearch(e.target.value)}\r\n                                    />\r\n                                </InputGroup>\r\n                            </div>\r\n                            <Button\r\n                                variant='outline-dark'\r\n                                size='sm'\r\n                                className='create-btn d-none d-sm-block'\r\n                                onClick={() => this.createConversation()}\r\n                            >\r\n                                <i className='fa fa-comments fa-lg' style={{marginRight: 8}} />\r\n                                {translation.CONVERSATIONS.NEW_CONVERSATION}\r\n                            </Button>\r\n                            <Button\r\n                                variant='outline-dark'\r\n                                className='d-block d-sm-none btn-mobile-icon'\r\n                                title={translation.CONVERSATIONS.NEW_CONVERSATION}\r\n                                onClick={() => this.createConversation()}\r\n                            >\r\n                                <i className='fa fa-comments fa-lg' />\r\n                            </Button>\r\n                        </div>\r\n                        {\r\n                            content\r\n                        }\r\n                        {this.state.clickedPicture &&\r\n                        <Modal\r\n                            show={this.state.clickedPicture !== null}\r\n                            className='profile-modal'\r\n                            onHide={this.hidePictureModal}\r\n                        >\r\n                            <Modal.Body style={{textAlign: 'center'}}>\r\n                                <Image\r\n                                    className='profile-modal-picture'\r\n                                    src={this.state.clickedPicture}\r\n                                />\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                        }\r\n\r\n                        {this.state.deleteConversationId &&\r\n                        <ConfirmationModal\r\n                            title={translation.COMMON.DELETE_CONFIRMATION}\r\n                            body={translation.CONVERSATIONS.DELETE_CONFIRMATION}\r\n                            onConfirm={() => this.deleteConversation()}\r\n                            onCancel={() => this.hideDeleteConfirmation()}\r\n                        />\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        user: state.authentication.user,\r\n        conversations: state.conversations.conversations,\r\n        isConversationsLoaded: state.conversations.isConversationsLoaded,\r\n        translation: state.translation\r\n    }),\r\n    { getConversationsByUser, deleteConversation }\r\n)(Conversations);"],"sourceRoot":""}