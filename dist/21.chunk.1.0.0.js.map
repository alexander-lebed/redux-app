{"version":3,"sources":["webpack:///./src/__tests__/App.spec.js"],"names":["localStorageMock","getItem","jest","fn","setItem","removeItem","clear","Notification","requestPermission","global","init","describe","mockAdapter","store","beforeEach","_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","wrap","_context","prev","next","axios_mock_adapter__WEBPACK_IMPORTED_MODULE_6___default","configureStore","sent","stop","test","_ref2","_callee2","done","wrapper","_context2","mount","react__WEBPACK_IMPORTED_MODULE_2___default","createElement","react_redux__WEBPACK_IMPORTED_MODULE_4__","_App__WEBPACK_IMPORTED_MODULE_9__","setTimeout","LoginPage","expect","_x","apply","this","arguments"],"mappings":"yPAUMA,EAAmB,CACrBC,QAASC,KADYC,KAErBC,QAASF,KAFYC,KAGrBE,WAAYH,KAHSC,KAIrBG,MAAOJ,WAELK,EAAe,CACjBC,kBAAmBN,WAEvBO,iBACAA,wBACAA,iBAEAP,oBAAqB,iBAAO,CACxBQ,KAAM,gBAGVC,SAAQ,uBAAyB,WAE7B,IAAAC,EACAC,EAEAC,WAAUC,IAAAC,EAAAC,EAAAC,KAAC,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACPX,EAAc,IAAAY,EAAAP,EAAdL,KADOS,EAAAE,KAAA,EAEOE,oBAFP,OAEPZ,EAFOQ,EAAAK,KAAA,wBAAAL,EAAAM,SAAAR,OAKXS,KAAI,2CAAAC,EAAAd,IAAAC,EAAAC,EAAAC,KAA8B,SAAAY,EAAAC,GAAA,IAAAC,EAAA,OAAAhB,EAAAC,EAAAG,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,cAC9BX,yCACAA,mCAF8BqB,EAAAV,KAAA,EAGRW,gBAClBC,EAAAlB,EAAAmB,cAAAC,EAAA,GAAUxB,MAAOA,GACbsB,EAAAlB,EAAAmB,cAAAE,EAAA,QALsB,eAGxBN,EAHwBC,EAAAP,KAQ9Ba,WAAW,WACPP,WACA,IAAMQ,EAAYR,OAAlB,SACAS,OAAOD,EAAPC,sBACAV,KAJJQ,KAR8B,wBAAAN,EAAAN,SAAAG,MAA9B,gBAAAY,GAAA,OAAAb,EAAAc,MAAAC,KAAAC,YAAA","file":"21.chunk.1.0.0.js","sourcesContent":["import React from 'react';\r\nimport { mount } from 'enzyme';\r\nimport { Provider } from 'react-redux';\r\nimport $http from 'axios';\r\nimport MockAdapter from 'axios-mock-adapter';\r\nimport { WebSocket } from 'mock-socket';\r\nimport configureStore from '../redux/configureStore';\r\nimport App from '../App';\r\nimport { IMGUR_AUTH_GET_API, USERS_URL } from '../constants';\r\n\r\nconst localStorageMock = {\r\n    getItem: jest.fn(),\r\n    setItem: jest.fn(),\r\n    removeItem: jest.fn(),\r\n    clear: jest.fn(),\r\n};\r\nconst Notification = {\r\n    requestPermission: jest.fn()\r\n};\r\nglobal.localStorage = localStorageMock;\r\nglobal.WebSocket = WebSocket;\r\nglobal.Notification = Notification;\r\n\r\njest.mock('hellojs', () => ({\r\n    init: () => {}\r\n}));\r\n\r\ndescribe('App integration test', () => {\r\n\r\n    let mockAdapter;\r\n    let store;\r\n\r\n    beforeEach(async () => {\r\n        mockAdapter = new MockAdapter($http);\r\n        store = await configureStore();\r\n    });\r\n\r\n    test('should land on Login page', async (done) => {\r\n        mockAdapter.onGet(IMGUR_AUTH_GET_API).reply(200);\r\n        mockAdapter.onGet(USERS_URL).reply(200, []);\r\n        const wrapper = await mount(\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        );\r\n        setTimeout(() => {\r\n            wrapper.update();\r\n            const LoginPage = wrapper.find('Login');\r\n            expect(LoginPage.exists()).toEqual(true);\r\n            done();\r\n        }, 500);\r\n    });\r\n});"],"sourceRoot":""}