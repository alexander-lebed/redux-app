{"version":3,"sources":["webpack:///./node_modules/axios-mock-adapter/src/index.js","webpack:///./node_modules/deep-equal/index.js","webpack:///./node_modules/mock-socket/dist/mock-socket.js","webpack:///./node_modules/deep-equal/lib/keys.js","webpack:///./node_modules/deep-equal/lib/is_arguments.js","webpack:///./node_modules/axios-mock-adapter/src/handle_request.js","webpack:///./node_modules/axios-mock-adapter/src/utils.js"],"names":["deepEqual","__webpack_require__","handleRequest","VERBS","getVerbObject","reduce","accumulator","verb","reset","resetHandlers","call","this","resetHistory","handlers","history","MockAdapter","axiosInstance","options","originalAdapter","defaults","adapter","delayResponse","addHandler","method","handler","forEach","push","indexOfExistingHandler","index","i","length","item","isReplyOnce","RegExp","String","strict","findInHandlers","splice","prototype","config","mockAdapter","arguments","Promise","resolve","reject","bind","restore","concat","methodName","charAt","toUpperCase","slice","matcher","body","requestHeaders","_this","undefined","reply","code","response","headers","replyOnce","passThrough","networkError","error","Error","networkErrorOnce","timeout","timeoutOnce","module","exports","default","pSlice","Array","objectKeys","isArguments","actual","expected","opts","Date","getTime","a","b","key","isUndefinedOrNull","isBuffer","ka","kb","e","sort","objEquiv","value","x","copy","global","process","commonjsGlobal","window","self","requiresPort","port","protocol","split","has","Object","hasOwnProperty","decode","input","decodeURIComponent","replace","querystringify_1","stringify","obj","prefix","pairs","encodeURIComponent","join","parse","query","part","parser","result","exec","protocolre","slashes","rules","NaN","ignore","hash","lolcation","loc","location","finaldestination","type","URL","unescape","pathname","test","href","extractProtocol","address","match","toLowerCase","rest","relative","extracted","instruction","instructions","url","indexOf","base","path","last","unshift","up","host","hostname","username","password","auth","origin","toString","set","fn","pop","char","ins","qs","urlParse","delay","callback","context","setTimeout","timeoutContext","log","message","console","array","results","itemInArray","EventTarget","listeners","addEventListener","listener","isArray","removeEventListener","removingListener","arrayOfListeners","dispatchEvent","event","this$1","customArguments","len","eventName","apply","NetworkBridge","urlMap","attachWebSocket","websocket","connectionLookup","server","websockets","addMembershipToRoom","room","roomMemberships","attachServer","serverLookup","websocketsLookup","broadcaster","filter","removeServer","removeWebSocket","socket","removeMembershipFromRoom","memberships","networkBridge","CLOSE_CODES","CLOSE_NORMAL","CLOSE_GOING_AWAY","CLOSE_PROTOCOL_ERROR","CLOSE_UNSUPPORTED","CLOSE_NO_STATUS","CLOSE_ABNORMAL","UNSUPPORTED_DATA","POLICY_VIOLATION","CLOSE_TOO_LARGE","MISSING_EXTENSION","INTERNAL_ERROR","SERVICE_RESTART","TRY_AGAIN_LATER","TLS_HANDSHAKE","ERROR_PREFIX","CONSTRUCTOR_ERROR","CLOSE_ERROR","EVENT","CONSTRUCT","MESSAGE","CLOSE","EventPrototype","stopPropagation","stopImmediatePropagation","initEvent","bubbles","cancelable","Boolean","Event","EventPrototype$$1","eventInitConfig","TypeError","timeStamp","now","target","srcElement","returnValue","isTrusted","eventPhase","defaultPrevented","currentTarget","canncelBubble","__proto__","create","constructor","MessageEvent","data","lastEventId","ports","CloseEvent","reason","wasClean","cancelBubble","parseInt","createEvent","eventObject","createMessageEvent","messageEvent","createCloseEvent","closeEvent","closeWebSocketConnection","readyState","WebSocket$1","CLOSING","CLOSED","normalizeSendData","ArrayBuffer","EventTarget$$1","WebSocket","protocols","urlRecord","SyntaxError","urlVerification","uniq","map","p","count","duplicates","keys","protocolVerification","binaryType","CONNECTING","verifyClient","selectProtocol","selectedProtocol","isFilled","isRequested","OPEN","get","prop","cb","Proxy","prototypeAccessors","onopen","onmessage","onclose","onerror","open","close","send","str","m","errorEvent","failWebSocketConnection","defineProperties","retrieveGlobalObject","Server$1","Server","originalWebSocket","start","globalObj","stop","on","emit","clients","to","broadcastList","deduped","chainedRoom","chainedBroadcaster","in","args","simulate","of","SocketIO$1","SocketIO","broadcast","disconnect","off","leave","IO","connect","defineProperty","factory","shim","supportsArgumentsClass","supported","object","unsupported","propertyIsEnumerable","utils","makeResponse","status","isSimpleObject","JSON","baseURL","substr","findHandler","params","purgeIfReplyOnce","request","then","settle","axios","isEqual","rejectWithError","find","predicate","combineUrls","isUrlMatching","required","isRequestHeadersMatching","isBodyOrParametersMatching","parameters","isParametersMatching","requiredBody","parsedBody","isBodyMatching","mock","validateStatus","createErrorResponse"],"mappings":"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","file":"6.chunk.1.0.0.js","sourcesContent":["'use strict';\n\nvar deepEqual = require('deep-equal');\n\nvar handleRequest = require('./handle_request');\n\nvar VERBS = ['get', 'post', 'head', 'delete', 'patch', 'put', 'options', 'list'];\n\nfunction adapter() {\n  return function(config) {\n    var mockAdapter = this;\n    // axios >= 0.13.0 only passes the config and expects a promise to be\n    // returned. axios < 0.13.0 passes (config, resolve, reject).\n    if (arguments.length === 3) {\n      handleRequest(mockAdapter, arguments[0], arguments[1], arguments[2]);\n    } else {\n      return new Promise(function(resolve, reject) {\n        handleRequest(mockAdapter, resolve, reject, config);\n      });\n    }\n  }.bind(this);\n}\n\nfunction getVerbObject() {\n  return VERBS.reduce(function(accumulator, verb) {\n    accumulator[verb] = [];\n    return accumulator;\n  }, {});\n}\n\nfunction reset() {\n  resetHandlers.call(this);\n  resetHistory.call(this);\n}\n\nfunction resetHandlers() {\n  this.handlers = getVerbObject();\n}\n\nfunction resetHistory() {\n  this.history = getVerbObject();\n}\n\nfunction MockAdapter(axiosInstance, options) {\n  reset.call(this);\n\n  if (axiosInstance) {\n    this.axiosInstance = axiosInstance;\n    this.originalAdapter = axiosInstance.defaults.adapter;\n    this.delayResponse = options && options.delayResponse > 0 ? options.delayResponse : null;\n    axiosInstance.defaults.adapter = this.adapter.call(this);\n  }\n}\n\nMockAdapter.prototype.adapter = adapter;\n\nMockAdapter.prototype.restore = function restore() {\n  if (this.axiosInstance) {\n    this.axiosInstance.defaults.adapter = this.originalAdapter;\n  }\n};\n\nMockAdapter.prototype.reset = reset;\nMockAdapter.prototype.resetHandlers = resetHandlers;\nMockAdapter.prototype.resetHistory = resetHistory;\n\nVERBS.concat('any').forEach(function(method) {\n  var methodName = 'on' + method.charAt(0).toUpperCase() + method.slice(1);\n  MockAdapter.prototype[methodName] = function(matcher, body, requestHeaders) {\n    var _this = this;\n    var matcher = matcher === undefined ? /.*/ : matcher;\n\n    function reply(code, response, headers) {\n      var handler = [matcher, body, requestHeaders, code, response, headers];\n      addHandler(method, _this.handlers, handler);\n      return _this;\n    }\n\n    function replyOnce(code, response, headers) {\n      var handler = [matcher, body, requestHeaders, code, response, headers, true];\n      addHandler(method, _this.handlers, handler);\n      return _this;\n    }\n\n    return {\n      reply: reply,\n\n      replyOnce: replyOnce,\n\n      passThrough: function passThrough() {\n        var handler = [matcher, body];\n        addHandler(method, _this.handlers, handler);\n        return _this;\n      },\n\n      networkError: function() {\n        reply(function(config) {\n          var error = new Error('Network Error');\n          error.config = config;\n          return Promise.reject(error);\n        });\n      },\n\n      networkErrorOnce: function() {\n        replyOnce(function(config) {\n          var error = new Error('Network Error');\n          error.config = config;\n          return Promise.reject(error);\n        });\n      },\n\n      timeout: function() {\n        reply(function(config) {\n          var error = new Error('timeout of ' + config.timeout + 'ms exceeded');\n          error.config = config;\n          error.code = 'ECONNABORTED';\n          return Promise.reject(error);\n        });\n      },\n\n      timeoutOnce: function() {\n        replyOnce(function(config) {\n          var error = new Error('timeout of ' + config.timeout + 'ms exceeded');\n          error.config = config;\n          error.code = 'ECONNABORTED';\n          return Promise.reject(error);\n        });\n      }\n    };\n  };\n});\n\nfunction findInHandlers(method, handlers, handler) {\n  var index = -1;\n  for (var i = 0; i < handlers[method].length; i += 1) {\n    var item = handlers[method][i];\n    var isReplyOnce = item.length === 7;\n    var comparePaths = item[0] instanceof RegExp && handler[0] instanceof RegExp\n      ? String(item[0]) === String(handler[0])\n      : item[0] === handler[0];\n    var isSame = (\n      comparePaths &&\n      deepEqual(item[1], handler[1], { strict: true }) &&\n      deepEqual(item[2], handler[2], { strict: true })\n    );\n    if (isSame && !isReplyOnce) {\n      index =  i;\n    }\n  }\n  return index;\n}\n\nfunction addHandler(method, handlers, handler) {\n  if (method === 'any') {\n    VERBS.forEach(function(verb) {\n      handlers[verb].push(handler);\n    });\n  } else {\n    var indexOfExistingHandler = findInHandlers(method, handlers, handler);\n    if (indexOfExistingHandler > -1 && handler.length < 7) {\n      handlers[method].splice(indexOfExistingHandler, 1, handler);\n    } else {\n      handlers[method].push(handler);\n    }\n  }\n}\n\nmodule.exports = MockAdapter;\nmodule.exports.default = MockAdapter;\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.Mock = global.Mock || {})));\n}(this, (function (exports) { 'use strict';\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nvar requiresPort = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) { return false; }\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  return decodeURIComponent(input.replace(/\\+/g, ' '));\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    if (key in result) { continue; }\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = [];\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) { prefix = '?'; }\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nvar stringify = querystringify;\nvar parse = querystring;\n\nvar querystringify_1 = {\n\tstringify: stringify,\n\tparse: parse\n};\n\nvar protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i;\nvar slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//;\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @api public\n */\nfunction lolcation(loc) {\n  var location = commonjsGlobal && commonjsGlobal.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n    for (key in ignore) { delete finaldestination[key]; }\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) { continue; }\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @api private\n */\nfunction extractProtocol(address) {\n  var match = protocolre.exec(address);\n\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @api private\n */\nfunction resolve(relative, base) {\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) { unshift = true; }\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) { path.unshift(''); }\n  if (last === '.' || last === '..') { path.push(''); }\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} location Location defaults for relative paths.\n * @param {Boolean|Function} parser Parser for the query string.\n * @api public\n */\nfunction URL(address, location, parser) {\n  if (!(this instanceof URL)) {\n    return new URL(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) { parser = querystringify_1.parse; }\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) { instructions[2] = [/(.*)/, 'pathname']; }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) { url[key] = url[key].toLowerCase(); }\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) { url.query = parser(url.query); }\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!requiresPort(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL}\n * @api public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || querystringify_1.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!requiresPort(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) { value += ':'+ url.port; }\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) { url[ins[1]] = url[ins[1]].toLowerCase(); }\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String}\n * @api public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) { stringify = querystringify_1.stringify; }\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') { protocol += ':'; }\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) { result += ':'+ url.password; }\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) { result += '?' !== query.charAt(0) ? '?'+ query : query; }\n\n  if (url.hash) { result += url.hash; }\n\n  return result;\n}\n\nURL.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nURL.extractProtocol = extractProtocol;\nURL.location = lolcation;\nURL.qs = querystringify_1;\n\nvar urlParse = URL;\n\n/*\n* This delay allows the thread to finish assigning its on* methods\n* before invoking the delay callback. This is purely a timing hack.\n* http://geekabyte.blogspot.com/2014/01/javascript-effect-of-setting-settimeout.html\n*\n* @param {callback: function} the callback which will be invoked after the timeout\n* @parma {context: object} the context in which to invoke the function\n*/\nfunction delay(callback, context) {\n  setTimeout(function (timeoutContext) { return callback.call(timeoutContext); }, 4, context);\n}\n\nfunction log(method, message) {\n  /* eslint-disable no-console */\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'test') {\n    console[method].call(null, message);\n  }\n  /* eslint-enable no-console */\n}\n\nfunction reject(array, callback) {\n  var results = [];\n  array.forEach(function (itemInArray) {\n    if (!callback(itemInArray)) {\n      results.push(itemInArray);\n    }\n  });\n\n  return results;\n}\n\nfunction filter(array, callback) {\n  var results = [];\n  array.forEach(function (itemInArray) {\n    if (callback(itemInArray)) {\n      results.push(itemInArray);\n    }\n  });\n\n  return results;\n}\n\n/*\n* EventTarget is an interface implemented by objects that can\n* receive events and may have listeners for them.\n*\n* https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n*/\nvar EventTarget = function EventTarget() {\n  this.listeners = {};\n};\n\n/*\n* Ties a listener function to an event type which can later be invoked via the\n* dispatchEvent method.\n*\n* @param {string} type - the type of event (ie: 'open', 'message', etc.)\n* @param {function} listener - the callback function to invoke whenever an event is dispatched matching the given type\n* @param {boolean} useCapture - N/A TODO: implement useCapture functionality\n*/\nEventTarget.prototype.addEventListener = function addEventListener (type, listener /* , useCapture */) {\n  if (typeof listener === 'function') {\n    if (!Array.isArray(this.listeners[type])) {\n      this.listeners[type] = [];\n    }\n\n    // Only add the same function once\n    if (filter(this.listeners[type], function (item) { return item === listener; }).length === 0) {\n      this.listeners[type].push(listener);\n    }\n  }\n};\n\n/*\n* Removes the listener so it will no longer be invoked via the dispatchEvent method.\n*\n* @param {string} type - the type of event (ie: 'open', 'message', etc.)\n* @param {function} listener - the callback function to invoke whenever an event is dispatched matching the given type\n* @param {boolean} useCapture - N/A TODO: implement useCapture functionality\n*/\nEventTarget.prototype.removeEventListener = function removeEventListener (type, removingListener /* , useCapture */) {\n  var arrayOfListeners = this.listeners[type];\n  this.listeners[type] = reject(arrayOfListeners, function (listener) { return listener === removingListener; });\n};\n\n/*\n* Invokes all listener functions that are listening to the given event.type property. Each\n* listener will be passed the event as the first argument.\n*\n* @param {object} event - event object which will be passed to all listeners of the event.type property\n*/\nEventTarget.prototype.dispatchEvent = function dispatchEvent (event) {\n    var this$1 = this;\n    var customArguments = [], len = arguments.length - 1;\n    while ( len-- > 0 ) customArguments[ len ] = arguments[ len + 1 ];\n\n  var eventName = event.type;\n  var listeners = this.listeners[eventName];\n\n  if (!Array.isArray(listeners)) {\n    return false;\n  }\n\n  listeners.forEach(function (listener) {\n    if (customArguments.length > 0) {\n      listener.apply(this$1, customArguments);\n    } else {\n      listener.call(this$1, event);\n    }\n  });\n\n  return true;\n};\n\n/*\n* The network bridge is a way for the mock websocket object to 'communicate' with\n* all available servers. This is a singleton object so it is important that you\n* clean up urlMap whenever you are finished.\n*/\nvar NetworkBridge = function NetworkBridge() {\n  this.urlMap = {};\n};\n\n/*\n* Attaches a websocket object to the urlMap hash so that it can find the server\n* it is connected to and the server in turn can find it.\n*\n* @param {object} websocket - websocket object to add to the urlMap hash\n* @param {string} url\n*/\nNetworkBridge.prototype.attachWebSocket = function attachWebSocket (websocket, url) {\n  var connectionLookup = this.urlMap[url];\n\n  if (connectionLookup && connectionLookup.server && connectionLookup.websockets.indexOf(websocket) === -1) {\n    connectionLookup.websockets.push(websocket);\n    return connectionLookup.server;\n  }\n};\n\n/*\n* Attaches a websocket to a room\n*/\nNetworkBridge.prototype.addMembershipToRoom = function addMembershipToRoom (websocket, room) {\n  var connectionLookup = this.urlMap[websocket.url];\n\n  if (connectionLookup && connectionLookup.server && connectionLookup.websockets.indexOf(websocket) !== -1) {\n    if (!connectionLookup.roomMemberships[room]) {\n      connectionLookup.roomMemberships[room] = [];\n    }\n\n    connectionLookup.roomMemberships[room].push(websocket);\n  }\n};\n\n/*\n* Attaches a server object to the urlMap hash so that it can find a websockets\n* which are connected to it and so that websockets can in turn can find it.\n*\n* @param {object} server - server object to add to the urlMap hash\n* @param {string} url\n*/\nNetworkBridge.prototype.attachServer = function attachServer (server, url) {\n  var connectionLookup = this.urlMap[url];\n\n  if (!connectionLookup) {\n    this.urlMap[url] = {\n      server: server,\n      websockets: [],\n      roomMemberships: {}\n    };\n\n    return server;\n  }\n};\n\n/*\n* Finds the server which is 'running' on the given url.\n*\n* @param {string} url - the url to use to find which server is running on it\n*/\nNetworkBridge.prototype.serverLookup = function serverLookup (url) {\n  var connectionLookup = this.urlMap[url];\n\n  if (connectionLookup) {\n    return connectionLookup.server;\n  }\n};\n\n/*\n* Finds all websockets which is 'listening' on the given url.\n*\n* @param {string} url - the url to use to find all websockets which are associated with it\n* @param {string} room - if a room is provided, will only return sockets in this room\n* @param {class} broadcaster - socket that is broadcasting and is to be excluded from the lookup\n*/\nNetworkBridge.prototype.websocketsLookup = function websocketsLookup (url, room, broadcaster) {\n  var websockets;\n  var connectionLookup = this.urlMap[url];\n\n  websockets = connectionLookup ? connectionLookup.websockets : [];\n\n  if (room) {\n    var members = connectionLookup.roomMemberships[room];\n    websockets = members || [];\n  }\n\n  return broadcaster ? websockets.filter(function (websocket) { return websocket !== broadcaster; }) : websockets;\n};\n\n/*\n* Removes the entry associated with the url.\n*\n* @param {string} url\n*/\nNetworkBridge.prototype.removeServer = function removeServer (url) {\n  delete this.urlMap[url];\n};\n\n/*\n* Removes the individual websocket from the map of associated websockets.\n*\n* @param {object} websocket - websocket object to remove from the url map\n* @param {string} url\n*/\nNetworkBridge.prototype.removeWebSocket = function removeWebSocket (websocket, url) {\n  var connectionLookup = this.urlMap[url];\n\n  if (connectionLookup) {\n    connectionLookup.websockets = reject(connectionLookup.websockets, function (socket) { return socket === websocket; });\n  }\n};\n\n/*\n* Removes a websocket from a room\n*/\nNetworkBridge.prototype.removeMembershipFromRoom = function removeMembershipFromRoom (websocket, room) {\n  var connectionLookup = this.urlMap[websocket.url];\n  var memberships = connectionLookup.roomMemberships[room];\n\n  if (connectionLookup && memberships !== null) {\n    connectionLookup.roomMemberships[room] = reject(memberships, function (socket) { return socket === websocket; });\n  }\n};\n\nvar networkBridge = new NetworkBridge(); // Note: this is a singleton\n\n/*\n * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n */\nvar CLOSE_CODES = {\n  CLOSE_NORMAL: 1000,\n  CLOSE_GOING_AWAY: 1001,\n  CLOSE_PROTOCOL_ERROR: 1002,\n  CLOSE_UNSUPPORTED: 1003,\n  CLOSE_NO_STATUS: 1005,\n  CLOSE_ABNORMAL: 1006,\n  UNSUPPORTED_DATA: 1007,\n  POLICY_VIOLATION: 1008,\n  CLOSE_TOO_LARGE: 1009,\n  MISSING_EXTENSION: 1010,\n  INTERNAL_ERROR: 1011,\n  SERVICE_RESTART: 1012,\n  TRY_AGAIN_LATER: 1013,\n  TLS_HANDSHAKE: 1015\n};\n\nvar ERROR_PREFIX = {\n  CONSTRUCTOR_ERROR: \"Failed to construct 'WebSocket':\",\n  CLOSE_ERROR: \"Failed to execute 'close' on 'WebSocket':\",\n  EVENT: {\n    CONSTRUCT: \"Failed to construct 'Event':\",\n    MESSAGE: \"Failed to construct 'MessageEvent':\",\n    CLOSE: \"Failed to construct 'CloseEvent':\"\n  }\n};\n\nvar EventPrototype = function EventPrototype () {};\n\nEventPrototype.prototype.stopPropagation = function stopPropagation () {};\nEventPrototype.prototype.stopImmediatePropagation = function stopImmediatePropagation () {};\n\n// if no arguments are passed then the type is set to \"undefined\" on\n// chrome and safari.\nEventPrototype.prototype.initEvent = function initEvent (type, bubbles, cancelable) {\n    if ( type === void 0 ) type = 'undefined';\n    if ( bubbles === void 0 ) bubbles = false;\n    if ( cancelable === void 0 ) cancelable = false;\n\n  this.type = \"\" + type;\n  this.bubbles = Boolean(bubbles);\n  this.cancelable = Boolean(cancelable);\n};\n\nvar Event = (function (EventPrototype$$1) {\n  function Event(type, eventInitConfig) {\n    if ( eventInitConfig === void 0 ) eventInitConfig = {};\n\n    EventPrototype$$1.call(this);\n\n    if (!type) {\n      throw new TypeError(((ERROR_PREFIX.EVENT_ERROR) + \" 1 argument required, but only 0 present.\"));\n    }\n\n    if (typeof eventInitConfig !== 'object') {\n      throw new TypeError(((ERROR_PREFIX.EVENT_ERROR) + \" parameter 2 ('eventInitDict') is not an object.\"));\n    }\n\n    var bubbles = eventInitConfig.bubbles;\n    var cancelable = eventInitConfig.cancelable;\n\n    this.type = \"\" + type;\n    this.timeStamp = Date.now();\n    this.target = null;\n    this.srcElement = null;\n    this.returnValue = true;\n    this.isTrusted = false;\n    this.eventPhase = 0;\n    this.defaultPrevented = false;\n    this.currentTarget = null;\n    this.cancelable = cancelable ? Boolean(cancelable) : false;\n    this.canncelBubble = false;\n    this.bubbles = bubbles ? Boolean(bubbles) : false;\n  }\n\n  if ( EventPrototype$$1 ) Event.__proto__ = EventPrototype$$1;\n  Event.prototype = Object.create( EventPrototype$$1 && EventPrototype$$1.prototype );\n  Event.prototype.constructor = Event;\n\n  return Event;\n}(EventPrototype));\n\nvar MessageEvent = (function (EventPrototype$$1) {\n  function MessageEvent(type, eventInitConfig) {\n    if ( eventInitConfig === void 0 ) eventInitConfig = {};\n\n    EventPrototype$$1.call(this);\n\n    if (!type) {\n      throw new TypeError(((ERROR_PREFIX.EVENT.MESSAGE) + \" 1 argument required, but only 0 present.\"));\n    }\n\n    if (typeof eventInitConfig !== 'object') {\n      throw new TypeError(((ERROR_PREFIX.EVENT.MESSAGE) + \" parameter 2 ('eventInitDict') is not an object\"));\n    }\n\n    var bubbles = eventInitConfig.bubbles;\n    var cancelable = eventInitConfig.cancelable;\n    var data = eventInitConfig.data;\n    var origin = eventInitConfig.origin;\n    var lastEventId = eventInitConfig.lastEventId;\n    var ports = eventInitConfig.ports;\n\n    this.type = \"\" + type;\n    this.timeStamp = Date.now();\n    this.target = null;\n    this.srcElement = null;\n    this.returnValue = true;\n    this.isTrusted = false;\n    this.eventPhase = 0;\n    this.defaultPrevented = false;\n    this.currentTarget = null;\n    this.cancelable = cancelable ? Boolean(cancelable) : false;\n    this.canncelBubble = false;\n    this.bubbles = bubbles ? Boolean(bubbles) : false;\n    this.origin = \"\" + origin;\n    this.ports = typeof ports === 'undefined' ? null : ports;\n    this.data = typeof data === 'undefined' ? null : data;\n    this.lastEventId = \"\" + (lastEventId || '');\n  }\n\n  if ( EventPrototype$$1 ) MessageEvent.__proto__ = EventPrototype$$1;\n  MessageEvent.prototype = Object.create( EventPrototype$$1 && EventPrototype$$1.prototype );\n  MessageEvent.prototype.constructor = MessageEvent;\n\n  return MessageEvent;\n}(EventPrototype));\n\nvar CloseEvent = (function (EventPrototype$$1) {\n  function CloseEvent(type, eventInitConfig) {\n    if ( eventInitConfig === void 0 ) eventInitConfig = {};\n\n    EventPrototype$$1.call(this);\n\n    if (!type) {\n      throw new TypeError(((ERROR_PREFIX.EVENT.CLOSE) + \" 1 argument required, but only 0 present.\"));\n    }\n\n    if (typeof eventInitConfig !== 'object') {\n      throw new TypeError(((ERROR_PREFIX.EVENT.CLOSE) + \" parameter 2 ('eventInitDict') is not an object\"));\n    }\n\n    var bubbles = eventInitConfig.bubbles;\n    var cancelable = eventInitConfig.cancelable;\n    var code = eventInitConfig.code;\n    var reason = eventInitConfig.reason;\n    var wasClean = eventInitConfig.wasClean;\n\n    this.type = \"\" + type;\n    this.timeStamp = Date.now();\n    this.target = null;\n    this.srcElement = null;\n    this.returnValue = true;\n    this.isTrusted = false;\n    this.eventPhase = 0;\n    this.defaultPrevented = false;\n    this.currentTarget = null;\n    this.cancelable = cancelable ? Boolean(cancelable) : false;\n    this.cancelBubble = false;\n    this.bubbles = bubbles ? Boolean(bubbles) : false;\n    this.code = typeof code === 'number' ? parseInt(code, 10) : 0;\n    this.reason = \"\" + (reason || '');\n    this.wasClean = wasClean ? Boolean(wasClean) : false;\n  }\n\n  if ( EventPrototype$$1 ) CloseEvent.__proto__ = EventPrototype$$1;\n  CloseEvent.prototype = Object.create( EventPrototype$$1 && EventPrototype$$1.prototype );\n  CloseEvent.prototype.constructor = CloseEvent;\n\n  return CloseEvent;\n}(EventPrototype));\n\n/*\n* Creates an Event object and extends it to allow full modification of\n* its properties.\n*\n* @param {object} config - within config you will need to pass type and optionally target\n*/\nfunction createEvent(config) {\n  var type = config.type;\n  var target = config.target;\n  var eventObject = new Event(type);\n\n  if (target) {\n    eventObject.target = target;\n    eventObject.srcElement = target;\n    eventObject.currentTarget = target;\n  }\n\n  return eventObject;\n}\n\n/*\n* Creates a MessageEvent object and extends it to allow full modification of\n* its properties.\n*\n* @param {object} config - within config: type, origin, data and optionally target\n*/\nfunction createMessageEvent(config) {\n  var type = config.type;\n  var origin = config.origin;\n  var data = config.data;\n  var target = config.target;\n  var messageEvent = new MessageEvent(type, {\n    data: data,\n    origin: origin\n  });\n\n  if (target) {\n    messageEvent.target = target;\n    messageEvent.srcElement = target;\n    messageEvent.currentTarget = target;\n  }\n\n  return messageEvent;\n}\n\n/*\n* Creates a CloseEvent object and extends it to allow full modification of\n* its properties.\n*\n* @param {object} config - within config: type and optionally target, code, and reason\n*/\nfunction createCloseEvent(config) {\n  var code = config.code;\n  var reason = config.reason;\n  var type = config.type;\n  var target = config.target;\n  var wasClean = config.wasClean;\n\n  if (!wasClean) {\n    wasClean = code === 1000;\n  }\n\n  var closeEvent = new CloseEvent(type, {\n    code: code,\n    reason: reason,\n    wasClean: wasClean\n  });\n\n  if (target) {\n    closeEvent.target = target;\n    closeEvent.srcElement = target;\n    closeEvent.currentTarget = target;\n  }\n\n  return closeEvent;\n}\n\nfunction closeWebSocketConnection(context, code, reason) {\n  context.readyState = WebSocket$1.CLOSING;\n\n  var server = networkBridge.serverLookup(context.url);\n  var closeEvent = createCloseEvent({\n    type: 'close',\n    target: context,\n    code: code,\n    reason: reason\n  });\n\n  delay(function () {\n    networkBridge.removeWebSocket(context, context.url);\n\n    context.readyState = WebSocket$1.CLOSED;\n    context.dispatchEvent(closeEvent);\n\n    if (server) {\n      server.dispatchEvent(closeEvent, server);\n    }\n  }, context);\n}\n\nfunction failWebSocketConnection(context, code, reason) {\n  context.readyState = WebSocket$1.CLOSING;\n\n  var server = networkBridge.serverLookup(context.url);\n  var closeEvent = createCloseEvent({\n    type: 'close',\n    target: context,\n    code: code,\n    reason: reason,\n    wasClean: false\n  });\n\n  var errorEvent = createEvent({\n    type: 'error',\n    target: context\n  });\n\n  delay(function () {\n    networkBridge.removeWebSocket(context, context.url);\n\n    context.readyState = WebSocket$1.CLOSED;\n    context.dispatchEvent(errorEvent);\n    context.dispatchEvent(closeEvent);\n\n    if (server) {\n      server.dispatchEvent(closeEvent, server);\n    }\n  }, context);\n}\n\nfunction normalizeSendData(data) {\n  if (Object.prototype.toString.call(data) !== '[object Blob]' && !(data instanceof ArrayBuffer)) {\n    data = String(data);\n  }\n\n  return data;\n}\n\nfunction proxyFactory(target) {\n  var handler = {\n    get: function get(obj, prop) {\n      if (prop === 'close') {\n        return function close(options) {\n          if ( options === void 0 ) options = {};\n\n          var code = options.code || CLOSE_CODES.CLOSE_NORMAL;\n          var reason = options.reason || '';\n\n          closeWebSocketConnection(target, code, reason);\n        };\n      }\n\n      if (prop === 'send') {\n        return function send(data) {\n          data = normalizeSendData(data);\n\n          target.dispatchEvent(\n            createMessageEvent({\n              type: 'message',\n              data: data,\n              origin: this.url,\n              target: target\n            })\n          );\n        };\n      }\n\n      if (prop === 'on') {\n        return function onWrapper(type, cb) {\n          target.addEventListener((\"server::\" + type), cb);\n        };\n      }\n\n      return obj[prop];\n    }\n  };\n\n  var proxy = new Proxy(target, handler);\n  return proxy;\n}\n\nfunction lengthInUtf8Bytes(str) {\n  // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.\n  var m = encodeURIComponent(str).match(/%[89ABab]/g);\n  return str.length + (m ? m.length : 0);\n}\n\nfunction urlVerification(url) {\n  var urlRecord = new urlParse(url);\n  var pathname = urlRecord.pathname;\n  var protocol = urlRecord.protocol;\n  var hash = urlRecord.hash;\n\n  if (!url) {\n    throw new TypeError(((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" 1 argument required, but only 0 present.\"));\n  }\n\n  if (!pathname) {\n    urlRecord.pathname = '/';\n  }\n\n  if (protocol === '') {\n    throw new SyntaxError(((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The URL '\" + (urlRecord.toString()) + \"' is invalid.\"));\n  }\n\n  if (protocol !== 'ws:' && protocol !== 'wss:') {\n    throw new SyntaxError(\n      ((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The URL's scheme must be either 'ws' or 'wss'. '\" + protocol + \"' is not allowed.\")\n    );\n  }\n\n  if (hash !== '') {\n    /* eslint-disable max-len */\n    throw new SyntaxError(\n      ((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The URL contains a fragment identifier ('\" + hash + \"'). Fragment identifiers are not allowed in WebSocket URLs.\")\n    );\n    /* eslint-enable max-len */\n  }\n\n  return urlRecord.toString();\n}\n\nfunction protocolVerification(protocols) {\n  if ( protocols === void 0 ) protocols = [];\n\n  if (!Array.isArray(protocols) && typeof protocols !== 'string') {\n    throw new SyntaxError(((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The subprotocol '\" + (protocols.toString()) + \"' is invalid.\"));\n  }\n\n  if (typeof protocols === 'string') {\n    protocols = [protocols];\n  }\n\n  var uniq = protocols.map(function (p) { return ({ count: 1, protocol: p }); }).reduce(function (a, b) {\n    a[b.protocol] = (a[b.protocol] || 0) + b.count;\n    return a;\n  }, {});\n\n  var duplicates = Object.keys(uniq).filter(function (a) { return uniq[a] > 1; });\n\n  if (duplicates.length > 0) {\n    throw new SyntaxError(((ERROR_PREFIX.CONSTRUCTOR_ERROR) + \" The subprotocol '\" + (duplicates[0]) + \"' is duplicated.\"));\n  }\n\n  return protocols;\n}\n\n/*\n * The main websocket class which is designed to mimick the native WebSocket class as close\n * as possible.\n *\n * https://html.spec.whatwg.org/multipage/web-sockets.html\n */\nvar WebSocket$1 = (function (EventTarget$$1) {\n  function WebSocket(url, protocols) {\n    EventTarget$$1.call(this);\n\n    this.url = urlVerification(url);\n    protocols = protocolVerification(protocols);\n    this.protocol = protocols[0] || '';\n\n    this.binaryType = 'blob';\n    this.readyState = WebSocket.CONNECTING;\n\n    var server = networkBridge.attachWebSocket(this, this.url);\n\n    /*\n     * This delay is needed so that we dont trigger an event before the callbacks have been\n     * setup. For example:\n     *\n     * var socket = new WebSocket('ws://localhost');\n     *\n     * If we dont have the delay then the event would be triggered right here and this is\n     * before the onopen had a chance to register itself.\n     *\n     * socket.onopen = () => { // this would never be called };\n     *\n     * and with the delay the event gets triggered here after all of the callbacks have been\n     * registered :-)\n     */\n    delay(function delayCallback() {\n      if (server) {\n        if (\n          server.options.verifyClient &&\n          typeof server.options.verifyClient === 'function' &&\n          !server.options.verifyClient()\n        ) {\n          this.readyState = WebSocket.CLOSED;\n\n          log(\n            'error',\n            (\"WebSocket connection to '\" + (this.url) + \"' failed: HTTP Authentication failed; no valid credentials available\")\n          );\n\n          networkBridge.removeWebSocket(this, this.url);\n          this.dispatchEvent(createEvent({ type: 'error', target: this }));\n          this.dispatchEvent(createCloseEvent({ type: 'close', target: this, code: CLOSE_CODES.CLOSE_NORMAL }));\n        } else {\n          if (server.options.selectProtocol && typeof server.options.selectProtocol === 'function') {\n            var selectedProtocol = server.options.selectProtocol(protocols);\n            var isFilled = selectedProtocol !== '';\n            var isRequested = protocols.indexOf(selectedProtocol) !== -1;\n            if (isFilled && !isRequested) {\n              this.readyState = WebSocket.CLOSED;\n\n              log('error', (\"WebSocket connection to '\" + (this.url) + \"' failed: Invalid Sub-Protocol\"));\n\n              networkBridge.removeWebSocket(this, this.url);\n              this.dispatchEvent(createEvent({ type: 'error', target: this }));\n              this.dispatchEvent(createCloseEvent({ type: 'close', target: this, code: CLOSE_CODES.CLOSE_NORMAL }));\n              return;\n            }\n            this.protocol = selectedProtocol;\n          }\n          this.readyState = WebSocket.OPEN;\n          this.dispatchEvent(createEvent({ type: 'open', target: this }));\n          server.dispatchEvent(createEvent({ type: 'connection' }), proxyFactory(this));\n        }\n      } else {\n        this.readyState = WebSocket.CLOSED;\n        this.dispatchEvent(createEvent({ type: 'error', target: this }));\n        this.dispatchEvent(createCloseEvent({ type: 'close', target: this, code: CLOSE_CODES.CLOSE_NORMAL }));\n\n        log('error', (\"WebSocket connection to '\" + (this.url) + \"' failed\"));\n      }\n    }, this);\n  }\n\n  if ( EventTarget$$1 ) WebSocket.__proto__ = EventTarget$$1;\n  WebSocket.prototype = Object.create( EventTarget$$1 && EventTarget$$1.prototype );\n  WebSocket.prototype.constructor = WebSocket;\n\n  var prototypeAccessors = { onopen: {},onmessage: {},onclose: {},onerror: {} };\n\n  prototypeAccessors.onopen.get = function () {\n    return this.listeners.open;\n  };\n\n  prototypeAccessors.onmessage.get = function () {\n    return this.listeners.message;\n  };\n\n  prototypeAccessors.onclose.get = function () {\n    return this.listeners.close;\n  };\n\n  prototypeAccessors.onerror.get = function () {\n    return this.listeners.error;\n  };\n\n  prototypeAccessors.onopen.set = function (listener) {\n    delete this.listeners.open;\n    this.addEventListener('open', listener);\n  };\n\n  prototypeAccessors.onmessage.set = function (listener) {\n    delete this.listeners.message;\n    this.addEventListener('message', listener);\n  };\n\n  prototypeAccessors.onclose.set = function (listener) {\n    delete this.listeners.close;\n    this.addEventListener('close', listener);\n  };\n\n  prototypeAccessors.onerror.set = function (listener) {\n    delete this.listeners.error;\n    this.addEventListener('error', listener);\n  };\n\n  WebSocket.prototype.send = function send (data) {\n    var this$1 = this;\n\n    if (this.readyState === WebSocket.CLOSING || this.readyState === WebSocket.CLOSED) {\n      throw new Error('WebSocket is already in CLOSING or CLOSED state');\n    }\n\n    // TODO: handle bufferedAmount\n\n    var messageEvent = createMessageEvent({\n      type: 'server::message',\n      origin: this.url,\n      data: normalizeSendData(data)\n    });\n\n    var server = networkBridge.serverLookup(this.url);\n\n    if (server) {\n      delay(function () {\n        this$1.dispatchEvent(messageEvent, data);\n      }, server);\n    }\n  };\n\n  WebSocket.prototype.close = function close (code, reason) {\n    if (code !== undefined) {\n      if (typeof code !== 'number' || (code !== 1000 && (code < 3000 || code > 4999))) {\n        throw new TypeError(\n          ((ERROR_PREFIX.CLOSE_ERROR) + \" The code must be either 1000, or between 3000 and 4999. \" + code + \" is neither.\")\n        );\n      }\n    }\n\n    if (reason !== undefined) {\n      var length = lengthInUtf8Bytes(reason);\n\n      if (length > 123) {\n        throw new SyntaxError(((ERROR_PREFIX.CLOSE_ERROR) + \" The message must not be greater than 123 bytes.\"));\n      }\n    }\n\n    if (this.readyState === WebSocket.CLOSING || this.readyState === WebSocket.CLOSED) {\n      return;\n    }\n\n    if (this.readyState === WebSocket.CONNECTING) {\n      failWebSocketConnection(this, code, reason);\n    } else {\n      closeWebSocketConnection(this, code, reason);\n    }\n  };\n\n  Object.defineProperties( WebSocket.prototype, prototypeAccessors );\n\n  return WebSocket;\n}(EventTarget));\n\nWebSocket$1.CONNECTING = 0;\nWebSocket$1.prototype.CONNECTING = WebSocket$1.CONNECTING;\nWebSocket$1.OPEN = 1;\nWebSocket$1.prototype.OPEN = WebSocket$1.OPEN;\nWebSocket$1.CLOSING = 2;\nWebSocket$1.prototype.CLOSING = WebSocket$1.CLOSING;\nWebSocket$1.CLOSED = 3;\nWebSocket$1.prototype.CLOSED = WebSocket$1.CLOSED;\n\nvar dedupe = function (arr) { return arr.reduce(function (deduped, b) {\n    if (deduped.indexOf(b) > -1) { return deduped; }\n    return deduped.concat(b);\n  }, []); };\n\nfunction retrieveGlobalObject() {\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  return typeof process === 'object' && typeof require === 'function' && typeof global === 'object' ? global : this;\n}\n\nvar Server$1 = (function (EventTarget$$1) {\n  function Server(url, options) {\n    if ( options === void 0 ) options = {};\n\n    EventTarget$$1.call(this);\n    var urlRecord = new urlParse(url);\n\n    if (!urlRecord.pathname) {\n      urlRecord.pathname = '/';\n    }\n\n    this.url = urlRecord.toString();\n\n    this.originalWebSocket = null;\n    var server = networkBridge.attachServer(this, this.url);\n\n    if (!server) {\n      this.dispatchEvent(createEvent({ type: 'error' }));\n      throw new Error('A mock server is already listening on this url');\n    }\n\n    if (typeof options.verifyClient === 'undefined') {\n      options.verifyClient = null;\n    }\n\n    if (typeof options.selectProtocol === 'undefined') {\n      options.selectProtocol = null;\n    }\n\n    this.options = options;\n    this.start();\n  }\n\n  if ( EventTarget$$1 ) Server.__proto__ = EventTarget$$1;\n  Server.prototype = Object.create( EventTarget$$1 && EventTarget$$1.prototype );\n  Server.prototype.constructor = Server;\n\n  /*\n   * Attaches the mock websocket object to the global object\n   */\n  Server.prototype.start = function start () {\n    var globalObj = retrieveGlobalObject();\n\n    if (globalObj.WebSocket) {\n      this.originalWebSocket = globalObj.WebSocket;\n    }\n\n    globalObj.WebSocket = WebSocket$1;\n  };\n\n  /*\n   * Removes the mock websocket object from the global object\n   */\n  Server.prototype.stop = function stop (callback) {\n    if ( callback === void 0 ) callback = function () {};\n\n    var globalObj = retrieveGlobalObject();\n\n    if (this.originalWebSocket) {\n      globalObj.WebSocket = this.originalWebSocket;\n    } else {\n      delete globalObj.WebSocket;\n    }\n\n    this.originalWebSocket = null;\n\n    networkBridge.removeServer(this.url);\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  };\n\n  /*\n   * This is the main function for the mock server to subscribe to the on events.\n   *\n   * ie: mockServer.on('connection', function() { console.log('a mock client connected'); });\n   *\n   * @param {string} type - The event key to subscribe to. Valid keys are: connection, message, and close.\n   * @param {function} callback - The callback which should be called when a certain event is fired.\n   */\n  Server.prototype.on = function on (type, callback) {\n    this.addEventListener(type, callback);\n  };\n\n  /*\n   * Closes the connection and triggers the onclose method of all listening\n   * websockets. After that it removes itself from the urlMap so another server\n   * could add itself to the url.\n   *\n   * @param {object} options\n   */\n  Server.prototype.close = function close (options) {\n    if ( options === void 0 ) options = {};\n\n    var code = options.code;\n    var reason = options.reason;\n    var wasClean = options.wasClean;\n    var listeners = networkBridge.websocketsLookup(this.url);\n\n    // Remove server before notifications to prevent immediate reconnects from\n    // socket onclose handlers\n    networkBridge.removeServer(this.url);\n\n    listeners.forEach(function (socket) {\n      socket.readyState = WebSocket$1.CLOSE;\n      socket.dispatchEvent(\n        createCloseEvent({\n          type: 'close',\n          target: socket,\n          code: code || CLOSE_CODES.CLOSE_NORMAL,\n          reason: reason || '',\n          wasClean: wasClean\n        })\n      );\n    });\n\n    this.dispatchEvent(createCloseEvent({ type: 'close' }), this);\n  };\n\n  /*\n   * Sends a generic message event to all mock clients.\n   */\n  Server.prototype.emit = function emit (event, data, options) {\n    var this$1 = this;\n    if ( options === void 0 ) options = {};\n\n    var websockets = options.websockets;\n\n    if (!websockets) {\n      websockets = networkBridge.websocketsLookup(this.url);\n    }\n\n    if (typeof options !== 'object' || arguments.length > 3) {\n      data = Array.prototype.slice.call(arguments, 1, arguments.length);\n      data = data.map(function (item) { return normalizeSendData(item); });\n    } else {\n      data = normalizeSendData(data);\n    }\n\n    websockets.forEach(function (socket) {\n      if (Array.isArray(data)) {\n        socket.dispatchEvent.apply(\n          socket, [ createMessageEvent({\n            type: event,\n            data: data,\n            origin: this$1.url,\n            target: socket\n          }) ].concat( data )\n        );\n      } else {\n        socket.dispatchEvent(\n          createMessageEvent({\n            type: event,\n            data: data,\n            origin: this$1.url,\n            target: socket\n          })\n        );\n      }\n    });\n  };\n\n  /*\n   * Returns an array of websockets which are listening to this server\n   * TOOD: this should return a set and not be a method\n   */\n  Server.prototype.clients = function clients () {\n    return networkBridge.websocketsLookup(this.url);\n  };\n\n  /*\n   * Prepares a method to submit an event to members of the room\n   *\n   * e.g. server.to('my-room').emit('hi!');\n   */\n  Server.prototype.to = function to (room, broadcaster, broadcastList) {\n    var this$1 = this;\n    if ( broadcastList === void 0 ) broadcastList = [];\n\n    var self = this;\n    var websockets = dedupe(broadcastList.concat(networkBridge.websocketsLookup(this.url, room, broadcaster)));\n\n    return {\n      to: function (chainedRoom, chainedBroadcaster) { return this$1.to.call(this$1, chainedRoom, chainedBroadcaster, websockets); },\n      emit: function emit(event, data) {\n        self.emit(event, data, { websockets: websockets });\n      }\n    };\n  };\n\n  /*\n   * Alias for Server.to\n   */\n  Server.prototype.in = function in$1 () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    return this.to.apply(null, args);\n  };\n\n  /*\n   * Simulate an event from the server to the clients. Useful for\n   * simulating errors.\n   */\n  Server.prototype.simulate = function simulate (event) {\n    var listeners = networkBridge.websocketsLookup(this.url);\n\n    if (event === 'error') {\n      listeners.forEach(function (socket) {\n        socket.readyState = WebSocket$1.CLOSE;\n        socket.dispatchEvent(createEvent({ type: 'error' }));\n      });\n    }\n  };\n\n  return Server;\n}(EventTarget));\n\n/*\n * Alternative constructor to support namespaces in socket.io\n *\n * http://socket.io/docs/rooms-and-namespaces/#custom-namespaces\n */\nServer$1.of = function of(url) {\n  return new Server$1(url);\n};\n\n/*\n* The socket-io class is designed to mimick the real API as closely as possible.\n*\n* http://socket.io/docs/\n*/\nvar SocketIO$1 = (function (EventTarget$$1) {\n  function SocketIO(url, protocol) {\n    var this$1 = this;\n    if ( url === void 0 ) url = 'socket.io';\n    if ( protocol === void 0 ) protocol = '';\n\n    EventTarget$$1.call(this);\n\n    this.binaryType = 'blob';\n    var urlRecord = new urlParse(url);\n\n    if (!urlRecord.pathname) {\n      urlRecord.pathname = '/';\n    }\n\n    this.url = urlRecord.toString();\n    this.readyState = SocketIO.CONNECTING;\n    this.protocol = '';\n\n    if (typeof protocol === 'string' || (typeof protocol === 'object' && protocol !== null)) {\n      this.protocol = protocol;\n    } else if (Array.isArray(protocol) && protocol.length > 0) {\n      this.protocol = protocol[0];\n    }\n\n    var server = networkBridge.attachWebSocket(this, this.url);\n\n    /*\n    * Delay triggering the connection events so they can be defined in time.\n    */\n    delay(function delayCallback() {\n      if (server) {\n        this.readyState = SocketIO.OPEN;\n        server.dispatchEvent(createEvent({ type: 'connection' }), server, this);\n        server.dispatchEvent(createEvent({ type: 'connect' }), server, this); // alias\n        this.dispatchEvent(createEvent({ type: 'connect', target: this }));\n      } else {\n        this.readyState = SocketIO.CLOSED;\n        this.dispatchEvent(createEvent({ type: 'error', target: this }));\n        this.dispatchEvent(\n          createCloseEvent({\n            type: 'close',\n            target: this,\n            code: CLOSE_CODES.CLOSE_NORMAL\n          })\n        );\n\n        log('error', (\"Socket.io connection to '\" + (this.url) + \"' failed\"));\n      }\n    }, this);\n\n    /**\n      Add an aliased event listener for close / disconnect\n     */\n    this.addEventListener('close', function (event) {\n      this$1.dispatchEvent(\n        createCloseEvent({\n          type: 'disconnect',\n          target: event.target,\n          code: event.code\n        })\n      );\n    });\n  }\n\n  if ( EventTarget$$1 ) SocketIO.__proto__ = EventTarget$$1;\n  SocketIO.prototype = Object.create( EventTarget$$1 && EventTarget$$1.prototype );\n  SocketIO.prototype.constructor = SocketIO;\n\n  var prototypeAccessors = { broadcast: {} };\n\n  /*\n  * Closes the SocketIO connection or connection attempt, if any.\n  * If the connection is already CLOSED, this method does nothing.\n  */\n  SocketIO.prototype.close = function close () {\n    if (this.readyState !== SocketIO.OPEN) {\n      return undefined;\n    }\n\n    var server = networkBridge.serverLookup(this.url);\n    networkBridge.removeWebSocket(this, this.url);\n\n    this.readyState = SocketIO.CLOSED;\n    this.dispatchEvent(\n      createCloseEvent({\n        type: 'close',\n        target: this,\n        code: CLOSE_CODES.CLOSE_NORMAL\n      })\n    );\n\n    if (server) {\n      server.dispatchEvent(\n        createCloseEvent({\n          type: 'disconnect',\n          target: this,\n          code: CLOSE_CODES.CLOSE_NORMAL\n        }),\n        server\n      );\n    }\n\n    return this;\n  };\n\n  /*\n  * Alias for Socket#close\n  *\n  * https://github.com/socketio/socket.io-client/blob/master/lib/socket.js#L383\n  */\n  SocketIO.prototype.disconnect = function disconnect () {\n    return this.close();\n  };\n\n  /*\n  * Submits an event to the server with a payload\n  */\n  SocketIO.prototype.emit = function emit (event) {\n    var data = [], len = arguments.length - 1;\n    while ( len-- > 0 ) data[ len ] = arguments[ len + 1 ];\n\n    if (this.readyState !== SocketIO.OPEN) {\n      throw new Error('SocketIO is already in CLOSING or CLOSED state');\n    }\n\n    var messageEvent = createMessageEvent({\n      type: event,\n      origin: this.url,\n      data: data\n    });\n\n    var server = networkBridge.serverLookup(this.url);\n\n    if (server) {\n      server.dispatchEvent.apply(server, [ messageEvent ].concat( data ));\n    }\n\n    return this;\n  };\n\n  /*\n  * Submits a 'message' event to the server.\n  *\n  * Should behave exactly like WebSocket#send\n  *\n  * https://github.com/socketio/socket.io-client/blob/master/lib/socket.js#L113\n  */\n  SocketIO.prototype.send = function send (data) {\n    this.emit('message', data);\n    return this;\n  };\n\n  /*\n  * For broadcasting events to other connected sockets.\n  *\n  * e.g. socket.broadcast.emit('hi!');\n  * e.g. socket.broadcast.to('my-room').emit('hi!');\n  */\n  prototypeAccessors.broadcast.get = function () {\n    if (this.readyState !== SocketIO.OPEN) {\n      throw new Error('SocketIO is already in CLOSING or CLOSED state');\n    }\n\n    var self = this;\n    var server = networkBridge.serverLookup(this.url);\n    if (!server) {\n      throw new Error((\"SocketIO can not find a server at the specified URL (\" + (this.url) + \")\"));\n    }\n\n    return {\n      emit: function emit(event, data) {\n        server.emit(event, data, { websockets: networkBridge.websocketsLookup(self.url, null, self) });\n        return self;\n      },\n      to: function to(room) {\n        return server.to(room, self);\n      },\n      in: function in$1(room) {\n        return server.in(room, self);\n      }\n    };\n  };\n\n  /*\n  * For registering events to be received from the server\n  */\n  SocketIO.prototype.on = function on (type, callback) {\n    this.addEventListener(type, callback);\n    return this;\n  };\n\n  /*\n   * Remove event listener\n   *\n   * https://socket.io/docs/client-api/#socket-on-eventname-callback\n   */\n  SocketIO.prototype.off = function off (type) {\n    this.removeEventListener(type);\n  };\n\n  /*\n   * Join a room on a server\n   *\n   * http://socket.io/docs/rooms-and-namespaces/#joining-and-leaving\n   */\n  SocketIO.prototype.join = function join (room) {\n    networkBridge.addMembershipToRoom(this, room);\n  };\n\n  /*\n   * Get the websocket to leave the room\n   *\n   * http://socket.io/docs/rooms-and-namespaces/#joining-and-leaving\n   */\n  SocketIO.prototype.leave = function leave (room) {\n    networkBridge.removeMembershipFromRoom(this, room);\n  };\n\n  SocketIO.prototype.to = function to (room) {\n    return this.broadcast.to(room);\n  };\n\n  SocketIO.prototype.in = function in$1 () {\n    return this.to.apply(null, arguments);\n  };\n\n  /*\n   * Invokes all listener functions that are listening to the given event.type property. Each\n   * listener will be passed the event as the first argument.\n   *\n   * @param {object} event - event object which will be passed to all listeners of the event.type property\n   */\n  SocketIO.prototype.dispatchEvent = function dispatchEvent (event) {\n    var this$1 = this;\n    var customArguments = [], len = arguments.length - 1;\n    while ( len-- > 0 ) customArguments[ len ] = arguments[ len + 1 ];\n\n    var eventName = event.type;\n    var listeners = this.listeners[eventName];\n\n    if (!Array.isArray(listeners)) {\n      return false;\n    }\n\n    listeners.forEach(function (listener) {\n      if (customArguments.length > 0) {\n        listener.apply(this$1, customArguments);\n      } else {\n        // Regular WebSockets expect a MessageEvent but Socketio.io just wants raw data\n        //  payload instanceof MessageEvent works, but you can't isntance of NodeEvent\n        //  for now we detect if the output has data defined on it\n        listener.call(this$1, event.data ? event.data : event);\n      }\n    });\n  };\n\n  Object.defineProperties( SocketIO.prototype, prototypeAccessors );\n\n  return SocketIO;\n}(EventTarget));\n\nSocketIO$1.CONNECTING = 0;\nSocketIO$1.OPEN = 1;\nSocketIO$1.CLOSING = 2;\nSocketIO$1.CLOSED = 3;\n\n/*\n* Static constructor methods for the IO Socket\n*/\nvar IO = function ioConstructor(url, protocol) {\n  return new SocketIO$1(url, protocol);\n};\n\n/*\n* Alias the raw IO() constructor\n*/\nIO.connect = function ioConnect(url, protocol) {\n  /* eslint-disable new-cap */\n  return IO(url, protocol);\n  /* eslint-enable new-cap */\n};\n\nvar Server = Server$1;\nvar WebSocket = WebSocket$1;\nvar SocketIO = IO;\n\nexports.Server = Server;\nexports.WebSocket = WebSocket;\nexports.SocketIO = SocketIO;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","'use strict';\n\nvar utils = require('./utils');\n\nfunction makeResponse(result, config) {\n  return {\n    status: result[0],\n    data: utils.isSimpleObject(result[1]) ? JSON.parse(JSON.stringify(result[1])) : result[1],\n    headers: result[2],\n    config: config\n  };\n}\n\nfunction handleRequest(mockAdapter, resolve, reject, config) {\n  var url = config.url;\n  if (config.baseURL && config.url.substr(0, config.baseURL.length) === config.baseURL) {\n    url = config.url.slice(config.baseURL ? config.baseURL.length : 0);\n  }\n\n  delete config.adapter;\n  mockAdapter.history[config.method].push(config);\n\n  var handler = utils.findHandler(\n    mockAdapter.handlers,\n    config.method,\n    url,\n    config.data,\n    config.params,\n    config.headers,\n    config.baseURL\n  );\n\n  if (handler) {\n    if (handler.length === 7) {\n      utils.purgeIfReplyOnce(mockAdapter, handler);\n    }\n\n    if (handler.length === 2) {\n      // passThrough handler\n      // tell axios to use the original adapter instead of our mock, fixes #35\n      config.adapter = mockAdapter.originalAdapter;\n      mockAdapter.axiosInstance.request(config).then(resolve, reject);\n    } else if (typeof handler[3] !== 'function') {\n      utils.settle(\n        resolve,\n        reject,\n        makeResponse(handler.slice(3), config),\n        mockAdapter.delayResponse\n      );\n    } else {\n      var result = handler[3](config);\n      // TODO throw a sane exception when return value is incorrect\n      if (typeof result.then !== 'function') {\n        utils.settle(resolve, reject, makeResponse(result, config), mockAdapter.delayResponse);\n      } else {\n        result.then(\n          function(result) {\n            if (result.config && result.status) {\n              utils.settle(resolve, reject, makeResponse([result.status, result.data, result.headers], result.config), 0);\n            } else {\n              utils.settle(resolve, reject, makeResponse(result, config), mockAdapter.delayResponse);\n            }\n          },\n          function(error) {\n            if (mockAdapter.delayResponse > 0) {\n              setTimeout(function() {\n                reject(error);\n              }, mockAdapter.delayResponse);\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    }\n  } else {\n    // handler not found\n    utils.settle(\n      resolve,\n      reject,\n      {\n        status: 404,\n        config: config\n      },\n      mockAdapter.delayResponse\n    );\n  }\n}\n\nmodule.exports = handleRequest;\n","'use strict';\n\nvar axios = require('axios');\nvar deepEqual = require('deep-equal');\n\nfunction isEqual(a, b) {\n  return deepEqual(a, b, { strict: true });\n}\n\n// < 0.13.0 will not have default headers set on a custom instance\nvar rejectWithError = !!axios.create().defaults.headers;\n\nfunction find(array, predicate) {\n  var length = array.length;\n  for (var i = 0; i < length; i++) {\n    var value = array[i];\n    if (predicate(value)) return value;\n  }\n}\n\nfunction combineUrls(baseURL, url) {\n  if (baseURL) {\n    return baseURL.replace(/\\/+$/, '') + '/' + url.replace(/^\\/+/, '');\n  }\n\n  return url;\n}\n\nfunction findHandler(handlers, method, url, body, parameters, headers, baseURL) {\n  return find(handlers[method.toLowerCase()], function(handler) {\n    if (typeof handler[0] === 'string') {\n      return (isUrlMatching(url, handler[0]) || isUrlMatching(combineUrls(baseURL, url), handler[0])) && isBodyOrParametersMatching(method, body, parameters, handler[1])  && isRequestHeadersMatching(headers, handler[2]);\n    } else if (handler[0] instanceof RegExp) {\n      return (handler[0].test(url) || handler[0].test(combineUrls(baseURL, url))) && isBodyOrParametersMatching(method, body, parameters, handler[1]) && isRequestHeadersMatching(headers, handler[2]);\n    }\n  });\n}\n\nfunction isUrlMatching(url, required) {\n  var noSlashUrl = url[0] === '/' ? url.substr(1) : url;\n  var noSlashRequired = required[0] === '/' ? required.substr(1) : required;\n  return (noSlashUrl === noSlashRequired);\n}\n\nfunction isRequestHeadersMatching(requestHeaders, required) {\n  if (required === undefined) return true;\n  return isEqual(requestHeaders, required);\n}\n\nfunction isBodyOrParametersMatching(method, body, parameters, required) {\n  var allowedParamsMethods = ['delete', 'get', 'head', 'options'];\n  if (allowedParamsMethods.indexOf(method.toLowerCase()) >= 0 ) {\n    var params = required ? required.params : undefined;\n    return isParametersMatching(parameters, params);\n  } else {\n    return isBodyMatching(body, required);\n  }\n}\n\nfunction isParametersMatching(parameters, required) {\n  if (required === undefined) return true;\n\n  return isEqual(parameters, required);\n}\n\nfunction isBodyMatching(body, requiredBody) {\n  if (requiredBody === undefined) {\n    return true;\n  }\n  var parsedBody;\n  try {\n    parsedBody = JSON.parse(body);\n  } catch (e) { }\n  return parsedBody ? isEqual(parsedBody, requiredBody) : isEqual(body, requiredBody);\n}\n\nfunction purgeIfReplyOnce(mock, handler) {\n  Object.keys(mock.handlers).forEach(function(key) {\n    var index = mock.handlers[key].indexOf(handler);\n    if (index > -1) {\n      mock.handlers[key].splice(index, 1);\n    }\n  });\n}\n\nfunction settle(resolve, reject, response, delay) {\n  if (delay > 0) {\n    setTimeout(function() {\n      settle(resolve, reject, response);\n    }, delay);\n    return;\n  }\n\n  if (response.config && response.config.validateStatus) {\n    response.config.validateStatus(response.status)\n      ? resolve(response)\n      : reject(createErrorResponse(\n        'Request failed with status code ' + response.status,\n        response.config,\n        response\n      ));\n    return;\n  }\n\n  // Support for axios < 0.11\n  if (response.status >= 200 && response.status < 300) {\n    resolve(response);\n  } else {\n    reject(response);\n  }\n}\n\nfunction createErrorResponse(message, config, response) {\n  // Support for axios < 0.13.0\n  if (!rejectWithError) return response;\n\n  var error = new Error(message);\n  error.config = config;\n  error.response = response;\n  return error;\n}\n\nfunction isSimpleObject(value) {\n  return value !== null && value !== undefined && value.toString() === '[object Object]';\n}\n\nmodule.exports = {\n  find: find,\n  findHandler: findHandler,\n  isSimpleObject: isSimpleObject,\n  purgeIfReplyOnce: purgeIfReplyOnce,\n  settle: settle\n};\n"],"sourceRoot":""}