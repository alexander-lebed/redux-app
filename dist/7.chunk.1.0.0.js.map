{"version":3,"sources":["webpack:///./node_modules/react-speech-recognition/lib/index.js","webpack:///./node_modules/react-speech-recognition/lib/SpeechRecognition.js","webpack:///./src/components/Dictaphone/index.js"],"names":["Object","defineProperty","exports","value","obj","_SpeechRecognition","__webpack_require__","_SpeechRecognition2","__esModule","default","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","options","SpeechRecognitionInner","WrappedComponent","BrowserSpeechRecognition","window","SpeechRecognition","webkitSpeechRecognition","mozSpeechRecognition","msSpeechRecognition","oSpeechRecognition","recognition","browserSupportsSpeechRecognition","listening","undefined","autoStart","start","pauseAfterDisconnect","interimTranscript","finalTranscript","_Component","SpeechRecognitionContainer","instance","TypeError","_classCallCheck","this","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","disconnect","disconnectType","abort","stop","resetTranscript","setState","startListening","continuous","DOMException","abortListening","stopListening","interimResults","onresult","updateTranscript","bind","onend","onRecognitionDisconnect","state","subClass","superClass","create","constructor","setPrototypeOf","_inherits","event","resultIndex","results","isFinal","concatTranscripts","transcript","_len","transcriptParts","Array","_key","map","t","trim","join","_react2","createElement","_react","Component","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_speech_recognition__WEBPACK_IMPORTED_MODULE_1__","react_speech_recognition__WEBPACK_IMPORTED_MODULE_1___default","_ref","onSpeach","useEffect","a","className","onClick"],"mappings":"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","file":"7.chunk.1.0.0.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SpeechRecognition = require('./SpeechRecognition');\n\nvar _SpeechRecognition2 = _interopRequireDefault(_SpeechRecognition);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _SpeechRecognition2.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nexports.default = SpeechRecognition;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction SpeechRecognition(options) {\n  var SpeechRecognitionInner = function SpeechRecognitionInner(WrappedComponent) {\n    var BrowserSpeechRecognition = typeof window !== 'undefined' && (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition);\n    var recognition = BrowserSpeechRecognition ? new BrowserSpeechRecognition() : null;\n    var browserSupportsSpeechRecognition = recognition !== null;\n    var listening = undefined;\n    if (!browserSupportsSpeechRecognition || options && options.autoStart === false) {\n      listening = false;\n    } else {\n      recognition.start();\n      listening = true;\n    }\n    var pauseAfterDisconnect = false;\n    var interimTranscript = '';\n    var finalTranscript = '';\n\n    return (function (_Component) {\n      _inherits(SpeechRecognitionContainer, _Component);\n\n      function SpeechRecognitionContainer(props) {\n        _classCallCheck(this, SpeechRecognitionContainer);\n\n        var _this = _possibleConstructorReturn(this, (SpeechRecognitionContainer.__proto__ || Object.getPrototypeOf(SpeechRecognitionContainer)).call(this, props));\n\n        _this.disconnect = function (disconnectType) {\n          if (recognition) {\n            switch (disconnectType) {\n              case 'ABORT':\n                pauseAfterDisconnect = true;\n                recognition.abort();\n                break;\n              case 'RESET':\n                pauseAfterDisconnect = false;\n                recognition.abort();\n                break;\n              case 'STOP':\n              default:\n                pauseAfterDisconnect = true;\n                recognition.stop();\n            }\n          }\n        };\n\n        _this.resetTranscript = function () {\n          interimTranscript = '';\n          finalTranscript = '';\n          _this.disconnect('RESET');\n          _this.setState({ interimTranscript: interimTranscript, finalTranscript: finalTranscript });\n        };\n\n        _this.startListening = function () {\n          if (recognition && !listening) {\n            if (!recognition.continuous) {\n              _this.resetTranscript();\n            }\n            try {\n              recognition.start();\n            } catch (DOMException) {\n              // Tried to start recognition after it has already started - safe to swallow this error\n            }\n            listening = true;\n            _this.setState({ listening: listening });\n          }\n        };\n\n        _this.abortListening = function () {\n          listening = false;\n          _this.setState({ listening: listening });\n          _this.disconnect('ABORT');\n        };\n\n        _this.stopListening = function () {\n          listening = false;\n          _this.setState({ listening: listening });\n          _this.disconnect('STOP');\n        };\n\n        if (browserSupportsSpeechRecognition) {\n          recognition.continuous = options.continuous !== false;\n          recognition.interimResults = true;\n          recognition.onresult = _this.updateTranscript.bind(_this);\n          recognition.onend = _this.onRecognitionDisconnect.bind(_this);\n        }\n\n        _this.state = {\n          interimTranscript: interimTranscript,\n          finalTranscript: finalTranscript,\n          listening: listening\n        };\n        return _this;\n      }\n\n      _createClass(SpeechRecognitionContainer, [{\n        key: 'onRecognitionDisconnect',\n        value: function onRecognitionDisconnect() {\n          listening = false;\n          if (pauseAfterDisconnect) {\n            this.setState({ listening: listening });\n          } else if (recognition) {\n            if (recognition.continuous) {\n              this.startListening();\n            } else {\n              this.setState({ listening: listening });\n            }\n          }\n          pauseAfterDisconnect = false;\n        }\n      }, {\n        key: 'updateTranscript',\n        value: function updateTranscript(event) {\n          interimTranscript = '';\n          for (var i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal) {\n              finalTranscript = this.concatTranscripts(finalTranscript, event.results[i][0].transcript);\n            } else {\n              interimTranscript = this.concatTranscripts(interimTranscript, event.results[i][0].transcript);\n            }\n          }\n          this.setState({ finalTranscript: finalTranscript, interimTranscript: interimTranscript });\n        }\n      }, {\n        key: 'concatTranscripts',\n        value: function concatTranscripts() {\n          for (var _len = arguments.length, transcriptParts = Array(_len), _key = 0; _key < _len; _key++) {\n            transcriptParts[_key] = arguments[_key];\n          }\n\n          return transcriptParts.map(function (t) {\n            return t.trim();\n          }).join(' ').trim();\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var transcript = this.concatTranscripts(finalTranscript, interimTranscript);\n\n          return _react2.default.createElement(WrappedComponent, _extends({\n            resetTranscript: this.resetTranscript,\n            startListening: this.startListening,\n            abortListening: this.abortListening,\n            stopListening: this.stopListening,\n            transcript: transcript,\n            recognition: recognition,\n            browserSupportsSpeechRecognition: browserSupportsSpeechRecognition\n          }, this.state, this.props));\n        }\n      }]);\n\n      return SpeechRecognitionContainer;\n    })(_react.Component);\n  };\n\n  if (typeof options === 'function') {\n    return SpeechRecognitionInner(options);\n  } else {\n    return SpeechRecognitionInner;\n  }\n}","// @flow\r\nimport React, {useEffect} from \"react\";\r\nimport SpeechRecognition from \"react-speech-recognition\";\r\n\r\nconst Dictaphone = ({\r\n    listening,\r\n    transcript,\r\n    startListening,\r\n    stopListening,\r\n    resetTranscript,\r\n    browserSupportsSpeechRecognition,\r\n    onSpeach\r\n}) => {\r\n    if (!browserSupportsSpeechRecognition) {\r\n        return null;\r\n    }\r\n    useEffect(() => {\r\n        if (listening) {\r\n            onSpeach(transcript);\r\n        }\r\n    }, [listening, transcript]);\r\n    return (\r\n        <div>\r\n            {listening ? null : (\r\n                <i className='fas fa-microphone' onClick={startListening} />\r\n            )}\r\n            <button onClick={stopListening}>Stop</button>\r\n            {/*<button onClick={resetTranscript}>Reset</button>*/}\r\n            {/*<h1>{transcript}</h1>*/}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SpeechRecognition({autoStart: false, continuous: false})(Dictaphone);"],"sourceRoot":""}