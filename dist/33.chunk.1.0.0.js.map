{"version":3,"sources":["webpack:///./src/components/Messages/MessageForm.js"],"names":["MessageForm","_React$Component","params","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","call","_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_6___default","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4___default","React","evt","shiftKey","state","messageText","_this$props","props","user","conversation","message","from","_id","username","text","timestamp","read","deleted","saveConversation","setState","showEmoji","input","textAreaRef","current","selectionStart","selectionEnd","value","updatedText","concat","_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default","_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default","key","_this2","translation","_this$state","messageStyle","paddingRight","emojiStyle","paddingLeft","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_10___default","noGutters","react_bootstrap_Col__WEBPACK_IMPORTED_MODULE_11___default","xs","sm","style","react_bootstrap_Form__WEBPACK_IMPORTED_MODULE_12___default","Group","controlId","className","display","marginBottom","flex","Control","id","ref","as","autoFocus","rows","placeholder","MESSAGES","WRITE_MESSAGE","onKeyPress","handleKeyPress","onChange","e","Text","WRITE_MESSAGE_INFO","emoji_mart__WEBPACK_IMPORTED_MODULE_9__","set","size","emoji","onClick","onEmojiClick","title","PICK_EMOJI","native","setText","Component","__webpack_exports__","Object","react_redux__WEBPACK_IMPORTED_MODULE_8__"],"mappings":"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","file":"33.chunk.1.0.0.js","sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Picker, Emoji } from 'emoji-mart';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { saveConversation } from '../../redux/reducers/conversations';\r\nimport type {Conversation as ConversationType, Message, Translation, User} from '../../types';\r\n\r\ntype Props = {\r\n    user: User,\r\n    conversation: ConversationType,\r\n    translation: Translation,\r\n    saveConversation: Function,\r\n}\r\n\r\ntype State = {\r\n    messageText: string,\r\n    showEmoji: boolean\r\n}\r\n\r\nexport class MessageForm extends React.Component<Props, State> {\r\n\r\n    state: State;\r\n    textAreaRef = React.createRef();\r\n\r\n    constructor(params: Props) {\r\n        super(params);\r\n        this.state = {\r\n            messageText: '',\r\n            showEmoji: false\r\n        };\r\n    }\r\n\r\n    handleKeyPress = (evt: any) => {\r\n        if (evt.key === 'Enter' && !evt.shiftKey) {\r\n            evt.preventDefault();\r\n            if (this.state.messageText) {\r\n                const {user, conversation} = this.props;\r\n                const emptyTime = null; // mark as null to set time on backend\r\n                const message: Message = {\r\n                    from: {_id: user._id, username: user.username},\r\n                    text: this.state.messageText,\r\n                    timestamp: emptyTime,\r\n                    read: false,\r\n                    deleted: false\r\n                };\r\n                conversation.messages.push(message);\r\n                conversation.timestamp = emptyTime;\r\n                this.props.saveConversation(conversation);\r\n                this.setState({\r\n                    messageText: ''}\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    onEmojiClick = () => this.setState({showEmoji: !this.state.showEmoji});\r\n\r\n    setText = (text) => {\r\n        const input = this.textAreaRef.current;\r\n        const {selectionStart, selectionEnd, value} = input;\r\n        const updatedText = `${value.substring(0, selectionStart)}${text}${value.substring(selectionEnd)}`;\r\n        input.focus();\r\n        input.selectionEnd= selectionEnd + 7;\r\n        this.setState({messageText: updatedText});\r\n    };\r\n\r\n    render () {\r\n        const { translation } = this.props;\r\n        const { messageText, showEmoji } = this.state;\r\n        const messageStyle = showEmoji ? {paddingRight: 0} : {};\r\n        const emojiStyle = showEmoji ? {paddingLeft: 0} : {};\r\n        return (\r\n            <Row noGutters>\r\n                <Col xs={12} sm={showEmoji ? 7 : 12} style={messageStyle}>\r\n                    <Form>\r\n                        <Form.Group controlId='message-form' className='message-form' style={{display: 'flex', marginBottom: 2}}>\r\n                            <div style={{flex: 1}}>\r\n                                <Form.Control\r\n                                    id=\"message-textarea\"\r\n                                    ref={this.textAreaRef}\r\n                                    as='textarea'\r\n                                    autoFocus={true}\r\n                                    className='text-area'\r\n                                    rows={4}\r\n                                    placeholder={this.props.translation.MESSAGES.WRITE_MESSAGE}\r\n                                    value={messageText}\r\n                                    onKeyPress={this.handleKeyPress}\r\n                                    onChange={e => this.setState({messageText: e.target.value})}\r\n                                />\r\n                                <Form.Text className='text-muted d-none d-sm-block'>\r\n                                    {this.props.translation.MESSAGES.WRITE_MESSAGE_INFO}\r\n                                </Form.Text>\r\n                            </div>\r\n                            <div className='emoji-select-area'>\r\n                                <Emoji\r\n                                    set='twitter'\r\n                                    size={32}\r\n                                    emoji={showEmoji ? 'grinning' : 'slightly_smiling_face'}\r\n                                    onClick={() => this.onEmojiClick()}\r\n                                />\r\n                            </div>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Col>\r\n                <Col xs={12} sm={showEmoji ? 5 : 12} style={emojiStyle}>\r\n                    {showEmoji &&\r\n                    <Picker\r\n                        title={translation.MESSAGES.PICK_EMOJI}\r\n                        emoji='monkey'\r\n                        native={true}\r\n                        onClick={emoji => this.setText(emoji.native)}\r\n                    />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        user: state.authentication.user,\r\n        conversation: state.conversations.conversation,\r\n        translation: state.translation\r\n    }),\r\n    { saveConversation }\r\n)(MessageForm);"],"sourceRoot":""}